{"version":3,"sources":["components/Configuration.js","helpers/tradingPairs.js","helpers/colors.js","components/Stats.js","helpers/stats.js","helpers/prices.js","components/Table.js","components/Trades.js","components/OpenOrders.js","components/About.js","helpers/routes.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","API_URLS","getConfiguration","ENV","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","getTradingPairs","COLORS","btc","btcusd","eth","ethusd","comparison","Stats","stats","setStats","tradingPairs","setTradingPairs","a","fetchTradingPairs","getStats","length","statsSortedByDay","sort","b","moment","datetime","lastUpdated","nextUpdate","add","hoursUntilUpdate","duration","diff","asHours","groupedStats","groupBy","stat","startOf","format","savingsPercentages","Object","values","map","statsForDay","name","savings","savings_percent","ticker","reduce","prev","cur","stat1","stat2","statsForPairs","coinAmounts","actualCoinAmount","actual_coin_amount","comparisonCoinAmount","comparison_coin_amount","dollarsSpent","totalSpend","total_spend","marketPrice","currentPrice","current_price","coinsPurchased","dcaComparisonAveragePrice","averageDcaPrice","average_dca_price","totalCoinsPurchased","limitStrategyPrice","Math","round","dcaComparisonPrice","latestPrice","parseFloat","dcaComparisonCoinValue","actualCoinValue","getStatsForTicker","findStatsForPair","find","includes","mt","flexDirection","w","justifyContent","p","minWidth","flexWrap","width","ResponsiveContainer","height","BarChart","data","dca","limit","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","LineChart","index","Line","type","yAxisId","getPrices","tickers","Promise","all","getPrice","prices","pricesObj","Table","headers","rows","ml","header","row","cell","style","padding","Trades","trades","setTrades","setPrices","fetchPrices","getTradesList","trade","timestampms","tradesObj","reverse","color","ScatterChart","ReferenceLine","y","alwaysShow","label","value","Scatter","price","amount","OpenOrders","orders","setOrders","pair","getOpenOrders","fontWeight","remaining_amount","About","target","href","linkPrefix","ROUTES","path","exact","display","element","localStorage","getItem","dev","prod","App","dashboardMode","setDashboardMode","dashboardInterval","dashboardTimer","setInterval","currentRouteIndex","findIndex","route","window","location","pathname","nextRoute","clearInterval","LinkContainer","isActive","children","mr","sx","background","border","textDecoration","EnvSelector","env","setEnv","onChange","e","setItem","reload","marginBottom","marginTop","Links","useLocation","to","className","checked","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.113db9c5.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\nimport { API_URLS, ENV } from \"../App\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        API_URLS.getConfiguration[ENV]\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import { API_URLS, ENV } from \"../App\";\n\nexport const getTradingPairs = () => {\n  return fetch(`${API_URLS.getTradingPairs[ENV]}`)\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        return result;\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n};\n","export const COLORS = {\n  btc: \"orange\",\n  btcusd: \"orange\",\n  eth: \"#407aff\",\n  ethusd: \"#407aff\",\n  comparison: \"grey\",\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { groupBy } from \"underscore\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { getStatsForTicker } from \"../helpers/stats\";\nimport { COLORS } from \"../helpers/colors\";\n\nexport const Stats = () => {\n  const [stats, setStats] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n\n    if (!stats) {\n      fetch(API_URLS.getStats[ENV])\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats, tradingPairs, setTradingPairs]);\n\n  if (!stats) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  if (stats.length === 0) {\n    return <Text as=\"h1\">No data yet.</Text>;\n  }\n\n  const statsSortedByDay = stats.sort(\n    (a, b) => moment(a.datetime) - moment(b.datetime)\n  );\n\n  const lastUpdated = moment(\n    statsSortedByDay[statsSortedByDay.length - 1].datetime\n  );\n  const nextUpdate = moment(lastUpdated).add(24, \"hours\");\n\n  const hoursUntilUpdate = moment.duration(nextUpdate.diff(moment())).asHours();\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  const savingsPercentages = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          savings: stat.savings_percent,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [cur.ticker]: cur.savings,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  if (!tradingPairs) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  const statsForPairs = tradingPairs\n    .map(({ name, ticker }) => {\n      return getStatsForTicker({ groupedStats, ticker });\n    })\n    // .reduce(\n    //   (prev, cur) => ({\n    //     ...prev,\n    //     [cur.ticker]: cur,\n    //   }),\n    //   {}\n    // );\n\n  if (!statsForPairs) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  const findStatsForPair = (ticker) => statsForPairs.find(stats => [stats.ticker].includes(ticker));\n\n  if (statsForPairs.length !== tradingPairs.length) {\n    return <Text as=\"h1\">Loading stats</Text>;\n  }\n\n  return (\n    <>\n      <Text mt=\"2\">Stats update in {Math.round(hoursUntilUpdate)} hours</Text>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        mb=\"4\"\n        mt=\"2\"\n        w={1}\n        justifyContent=\"space-between\"\n      >\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Dollars spent</Text>\n          {tradingPairs.map(({ name, ticker }) => (\n            <Box key={ticker}>\n              {findStatsForPair(ticker) && (\n                <Text key={ticker}>\n                  {name}: ${findStatsForPair(ticker).totalSpend}\n                </Text>\n              )}\n            </Box>\n          ))}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Coins purchased</Text>\n          {tradingPairs.map(({ name, ticker }) => (\n            <Box key={ticker}>\n              {findStatsForPair(ticker) && (\n                <Text key={ticker}>\n                  {name}: {findStatsForPair(ticker).totalCoinsPurchased}\n                </Text>\n              )}\n            </Box>\n          ))}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Dollar-Cost-Average strategy</Text>\n          {tradingPairs.map(({ name, ticker }) => (\n            <Box key={ticker}>\n              {findStatsForPair(ticker) && (\n                <Text key={ticker}>\n                  {name}: ${findStatsForPair(ticker).dcaComparisonPrice}\n                </Text>\n              )}\n            </Box>\n          ))}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Limit Strategy</Text>\n          {tradingPairs.map(({ name, ticker }) => (\n            <Box key={ticker}>\n              {findStatsForPair(ticker) && (\n                <Text key={ticker}>\n                  {name}: ${findStatsForPair(ticker).limitStrategyPrice}\n                </Text>\n              )}\n            </Box>\n          ))}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>\n            Bitcoin: {savingsPercentages[savingsPercentages.length - 1].btcusd}%\n          </Text>\n          <Text>\n            Ethereum: {savingsPercentages[savingsPercentages.length - 1].ethusd}\n            %\n          </Text>\n        </Box>\n      </Flex>\n      <Flex flexDirection={[\"column\", \"row\"]} flexWrap=\"wrap\">\n        {tradingPairs.map(({ name, ticker }) => (\n          <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\" key={ticker}>\n            <Text as=\"h3\">{name}: price per coin comparison</Text>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={[\n                  {\n                    dca: findStatsForPair(ticker)?.dcaComparisonPrice,\n                    limit: findStatsForPair(ticker)?.limitStrategyPrice,\n                  },\n                ]}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid stroke=\"#333\" />\n                <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n                <YAxis stroke=\"#ebebeb\" />\n                <Tooltip />\n                <Legend />\n\n                <Bar\n                  dataKey=\"dca\"\n                  name=\"dca strategy\"\n                  fill={COLORS.comparison}\n                />\n                <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.btc} />\n              </BarChart>\n            </ResponsiveContainer>\n          </Box>\n        ))}\n\n        {tradingPairs.map(({ name, ticker }) => (\n          <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\" key={ticker}>\n            <Text as=\"h3\">{name}: coin amounts compared to DCA</Text>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={findStatsForPair(ticker)?.coinAmounts}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid stroke=\"#333\" />\n                <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n                <YAxis stroke=\"#ebebeb\" />\n                <Tooltip />\n                <Legend />\n\n                <Bar\n                  dataKey={`${ticker}Comparison`}\n                  name=\"comparison\"\n                  fill={COLORS.comparison}\n                />\n                <Bar\n                  dataKey={`${ticker}Actual`}\n                  name=\"actual\"\n                  fill={COLORS[ticker]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </Box>\n        ))}\n\n        {tradingPairs.map(({ name, ticker }) => (\n          <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\" key={ticker}>\n            <Text as=\"h3\">{name}: coin value, in dollars</Text>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <BarChart\n                data={[\n                  {\n                    dca: findStatsForPair(ticker)?.dcaComparisonCoinValue,\n                    limit: findStatsForPair(ticker)?.actualCoinValue,\n                  },\n                ]}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid stroke=\"#333\" />\n                <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n                <YAxis stroke=\"#ebebeb\" />\n                <Tooltip />\n                <Legend />\n\n                <Bar\n                  dataKey=\"dca\"\n                  name=\"dca strategy\"\n                  fill={COLORS.comparison}\n                />\n                <Bar\n                  dataKey=\"limit\"\n                  name=\"limit strategy\"\n                  fill={COLORS[ticker]}\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </Box>\n        ))}\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Limit strategy advantage over time</Text>\n          <Text>(percentage dollars saved per coin)</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              data={savingsPercentages}\n              margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n            >\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n              <CartesianGrid stroke=\"#333\" />\n              {tradingPairs.map(({ ticker }, index) => (\n                <Line\n                  type=\"monotone\"\n                  dataKey={ticker}\n                  stroke={COLORS[ticker]}\n                  yAxisId={index}\n                  key={ticker}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\n\nexport const getStatsForTicker = ({ groupedStats, ticker }) => {\n  if (!ticker || !groupedStats) {\n    return null;\n  }\n  \n  const coinAmounts = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          comparisonCoinAmount: stat.comparison_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}Actual`]: cur.actualCoinAmount,\n            [`${cur.ticker}Comparison`]: cur.comparisonCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dollarsSpent = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          totalSpend: stat.total_spend,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}TotalSpend`]: cur.totalSpend,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const marketPrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          currentPrice: stat.current_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CurrentPrice`]: cur.currentPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const coinsPurchased = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CoinAmount`]: cur.actualCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dcaComparisonAveragePrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          averageDcaPrice: stat.average_dca_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}AverageDcaPrice`]: cur.averageDcaPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const totalSpend =\n    dollarsSpent[dollarsSpent.length - 1][`${ticker}TotalSpend`];\n\n  const totalCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1][`${ticker}CoinAmount`];\n\n  const limitStrategyPrice = Math.round(totalSpend / totalCoinsPurchased);\n  const dcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1][\n      `${ticker}AverageDcaPrice`\n    ];\n\n  const latestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1][`${ticker}CurrentPrice`]\n  );\n  const dcaComparisonCoinValue =\n    coinAmounts[coinAmounts.length - 1][`${ticker}Comparison`] * latestPrice;\n  const actualCoinValue =\n    coinAmounts[coinAmounts.length - 1][`${ticker}Actual`] * latestPrice;\n\n  return {\n    coinAmounts,\n    dollarsSpent,\n    marketPrice,\n    coinsPurchased,\n    dcaComparisonAveragePrice,\n    totalSpend,\n    totalCoinsPurchased,\n    limitStrategyPrice,\n    dcaComparisonPrice,\n    latestPrice,\n    dcaComparisonCoinValue,\n    actualCoinValue,\n    ticker\n  };\n};\n","import { API_URLS, ENV } from \"../App\";\n\nexport const getPrices = (tickers = [\"btcusd\", \"ethusd\"]) => {\n  return Promise.all(\n    tickers.map((ticker) => {\n      return fetch(`${API_URLS.getPrice[ENV]}?ticker=${ticker}`)\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            return { ticker: ticker, result };\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    })\n  ).then((result) => {\n    const prices = Object.values(result);\n    let pricesObj = {};\n    // eslint-disable-next-line array-callback-return\n    prices?.map((ticker) => {\n      if (!prices[ticker.ticker]){\n        prices[ticker.ticker] = 0;\n      }\n      pricesObj[ticker.ticker] = ticker.result;\n    });\n    return pricesObj;\n  });\n};\n","export const Table = ({ headers, rows }) => {\n    return (\n      <table ml=\"4\">\n        <thead>\n          <tr>\n            {headers.map((header) => (\n              <th>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row, index) => (\n            <tr key={index}>\n              {row.map((cell) => (\n                <td\n                  style={{\n                    padding: \".25rem\",\n                  }}\n                >\n                  {cell}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n}","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getPrices } from \"../helpers/prices\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { COLORS } from \"../helpers/colors\";\nimport { Table } from \"../components/Table\";\n\n\nexport const Trades = () => {\n  const [trades, setTrades] = useState();\n  const [prices, setPrices] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchPrices() {\n      const prices = await getPrices();\n      setPrices(prices);\n    }\n\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n\n    if (!prices) {\n      fetchPrices();\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n\n    if (!trades && tradingPairs) {\n      return Promise.all(\n        tradingPairs.map(({ name, ticker }) => {\n          return fetch(`${API_URLS.getTradesList[ENV]}?ticker=${ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades.map((ticker) => {\n          tradesObj[ticker.ticker] = ticker.result.reverse();\n        });\n        setTrades(tradesObj);\n      });\n    }\n  }, [trades, setTrades, prices, setPrices, tradingPairs, setTradingPairs]);\n\n  if (!trades) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h2\" mt=\"4\" ml=\"2\" textAlign=\"left\">\n        Buy History\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {tradingPairs.map(({ name, ticker }) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Box mt=\"2\" mb=\"2\">\n                  <Text as=\"h3\" color={COLORS[ticker]}>\n                    {name}\n                  </Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={trades[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      {prices && prices[ticker] && (\n                        <ReferenceLine\n                          y={prices[ticker]}\n                          stroke={COLORS[ticker]}\n                          alwaysShow={true}\n                          label={{\n                            value: `current price - $${prices[ticker]}`,\n                            fill: \"white\",\n                          }}\n                          color=\"white\"\n                        />\n                      )}\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Table\n                  headers={[\"Date\", \"Price\", \"Amount\"]}\n                  rows={Object.values(trades[ticker])\n                    .reverse()\n                    .map((trade) => ([trade.datetime, `$${trade.price}`, trade.amount]))}\n                />\n              )}\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine,\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getPrices } from \"../helpers/prices\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { COLORS } from \"../helpers/colors\";\nimport { Table } from \"../components/Table\";\n\n\nexport const OpenOrders = () => {\n  const [orders, setOrders] = useState();\n  const [prices, setPrices] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchPrices() {\n      const prices = await getPrices();\n      setPrices(prices);\n    }\n\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n\n    if (!prices) {\n      fetchPrices();\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n    if (!orders && tradingPairs) {\n      return Promise.all(\n        tradingPairs.map((pair) => {\n          return fetch(`${API_URLS.getOpenOrders[ENV]}?ticker=${pair.ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: pair.ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades?.map((ticker) => {\n          tradesObj[ticker?.ticker] = ticker?.result;\n        });\n        setOrders(tradesObj);\n      });\n    }\n  }, [prices, setPrices, orders, setOrders, tradingPairs, setTradingPairs]);\n\n  if (!orders) {\n    return <Text as=\"h1\">Loading orders...</Text>;\n  }\n\n  if (!tradingPairs) {\n    return <Text as=\"h1\">Loading trading pairs...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h1\" mt=\"4\" ml=\"2\" mb=\"2\" textAlign=\"left\">\n        Open Orders\n      </Text>\n\n      <Text textAlign=\"left\" ml=\"2\" mb=\"4\">\n        If the asset's{\" \"}\n        <span style={{ color: \"green\", fontWeight: \"bold\" }}>\n          price (green line)\n        </span>{\" \"}\n        drops down to any of the{\" \"}\n        <strong>white dots (open limit-buy orders)</strong>, the buy order gets\n        automatically triggered. Then, I create new orders based on the new\n        price.\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {tradingPairs.map((pair) => (\n          <Flex\n            key={pair.ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {orders[pair.ticker] && (\n                <Box mt=\"2\" mb=\"2\" width={1}>\n                  <Text as=\"h3\" mb=\"2\" color={COLORS[pair.ticker]}>\n                    {pair.name}\n                  </Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={orders[pair.ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      {prices && prices[pair.ticker] && (\n                        <ReferenceLine\n                          y={prices[pair.ticker]}\n                          stroke={COLORS[pair.ticker]}\n                          alwaysShow={true}\n                          label={{\n                            value: `current price - $${prices[pair.ticker]}`,\n                            fill: \"white\",\n                          }}\n                          color=\"white\"\n                        />\n                      )}\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={pair.ticker} ml=\"2\" width={[1, 1 / 2]}>\n              {orders[pair.ticker] && (\n                <Table\n                  headers={[\"Placed on\", \"Price\", \"Amount\"]}\n                  rows={Object.values(orders[pair.ticker]).map((trade) => [\n                    trade.datetime,\n                    `${trade.price}`,\n                    trade.remaining_amount,\n                  ])}\n                />\n              )}\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import { Text } from \"rebass\";\n\nexport const About = () => {\n  return (\n    <>\n      <Text textAlign=\"left\" ml=\"2\" mb=\"2\">\n        Hi, I'm the dashboard for an asset-buying robot.\n      </Text>\n\n      <Text textAlign=\"left\" ml=\"2\">\n        <a\n          target=\"_blank\"\n          href=\"https://github.com/samjhill/dashboard-limit-bot\"\n        >\n          Github\n        </a>\n      </Text>\n    </>\n  );\n};\n","import { Configuration } from \"../components/Configuration\";\nimport { Stats } from \"../components/Stats\";\nimport { Trades } from \"../components/Trades\";\nimport { OpenOrders } from \"../components/OpenOrders\";\nimport { About } from \"../components/About\";\n\nconst linkPrefix =\n  process.env.NODE_ENV === \"development\" ? \"\" : \"/dashboard-limit-bot\";\n\nexport const ROUTES = [\n  {\n    path: `${linkPrefix}/`,\n    exact: true,\n    display: \"About\",\n    element: <About />\n  },\n  {\n    path: `${linkPrefix}/orders`,\n    display: \"Open Orders\",\n    element: <OpenOrders />,\n  },\n  {\n    path: `${linkPrefix}/stats`,\n    display: \"Stats\",\n    element: <Stats />,\n  },\n  {\n    path: `${linkPrefix}/trades`,\n    display: \"Buy History\",\n    element: <Trades />,\n  },\n  {\n    path: `${linkPrefix}/configuration`,\n    display: \"Configuration\",\n    element: <Configuration />,\n  },\n];\n","import \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useLocation,\n} from \"react-router-dom\";\nimport { Box, Flex, Text } from \"rebass\";\nimport React, { useState, useEffect } from \"react\";\nimport { ROUTES } from \"./helpers/routes\";\n\nexport const ENV = localStorage.getItem(\"env\") || \"dev\";\n\nexport const API_URLS = {\n  getPrice: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_price\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_price\",\n  },\n  getOpenOrders: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_open_orders\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_open_orders\",\n  },\n  getTradesList: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_trades_list\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_trades_list\",\n  },\n  getConfiguration: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/configuration\",\n  },\n  getStats: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/stats\",\n  },\n  getTradingPairs: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/trading_pairs\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/trading_pairs\",\n  },\n};\n\nfunction App() {\n  const [dashboardMode, setDashboardMode] = useState(\n    localStorage.getItem(\"dashboardModeIsEnabled\") === \"true\"\n  );\n  const [dashboardInterval, setDashboardInterval] = useState(15000);\n\n  useEffect(() => {\n    let dashboardTimer;\n    if (dashboardMode) {\n      dashboardTimer = setInterval(() => {\n        const currentRouteIndex = ROUTES.findIndex((route) =>\n          window.location.pathname.includes(route.path)\n        );\n        const nextRoute = ROUTES[(currentRouteIndex + 1) % ROUTES.length];\n        window.location.href = nextRoute.path;\n      }, dashboardInterval);\n    } else {\n      clearInterval(dashboardTimer);\n    }\n  }, [dashboardMode, setDashboardMode, dashboardInterval]);\n\n  const LinkContainer = ({ isActive = false, children }) => (\n    <Box\n      mb=\"4\"\n      mr=\"2\"\n      w=\"100%\"\n      sx={{\n        a: {\n          width: \"100%\",\n          background: isActive ? \"white\" : \"none\",\n          color: isActive ? \"#333\" : \"white\",\n          border: \"1px solid white\",\n          padding: \".5rem\",\n          textDecoration: \"none\",\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n\n  const EnvSelector = () => {\n    const [env, setEnv] = useState(localStorage.getItem(\"env\") || \"dev\");\n\n    return (\n      <select\n        value={env}\n        onChange={(e) => {\n          setEnv(e.target.value);\n          localStorage.setItem(\"env\", e.target.value);\n          window.location.reload();\n        }}\n        style={{\n          marginBottom: \"1rem\",\n          marginTop: \".5rem\",\n          padding: \".5rem\",\n        }}\n      >\n        <option value=\"dev\">dev</option>\n        <option value=\"prod\">prod</option>\n      </select>\n    );\n  };\n\n  const Links = () => {\n    const location = useLocation();\n\n    return (\n      <Flex flexWrap=\"wrap\" mt=\"3\" ml=\"2\" flexDirection={[\"row\"]}>\n        {ROUTES.map((route) => (\n          <LinkContainer isActive={location.pathname === (route.path)} key={route.path}>\n            <Link to={route.path}>{route.display}</Link>\n          </LinkContainer>\n        ))}\n      </Flex>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Flex p=\"2\">\n            <EnvSelector />\n            <Box ml=\"3\">\n              <label>\n                <input\n                  checked={dashboardMode}\n                  type=\"checkbox\"\n                  onChange={() => {\n                    localStorage.setItem(\n                      \"dashboardModeIsEnabled\",\n                      !dashboardMode\n                    );\n                    setDashboardMode(!dashboardMode);\n                  }}\n                />\n                Dashboard Mode\n              </label>\n              <Text>\n                Flips through the pages every {dashboardInterval / 1000} seconds\n              </Text>\n            </Box>\n          </Flex>\n          <Links />\n          <Routes>\n            {ROUTES.map((route) => (\n              <Route\n                path={route.path}\n                exact={route.exact}\n                element={route.element}\n                key={route.path}\n              />\n            ))}\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}