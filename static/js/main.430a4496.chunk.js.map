{"version":3,"sources":["components/Configuration.js","helpers/tradingPairs.js","helpers/colors.js","components/Stats.js","helpers/stats.js","helpers/prices.js","components/Table.js","components/Trades.js","components/OpenOrders.js","components/About.js","helpers/routes.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","API_URLS","getConfiguration","ENV","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","getTradingPairs","COLORS","btc","btcusd","eth","ethusd","comparison","Stats","ticker","useLocation","pathname","split","selectedTicker","stats","setStats","tradingPairs","setTradingPairs","a","fetchTradingPairs","getStats","length","statsSortedByDay","sort","b","moment","datetime","lastUpdated","nextUpdate","add","hoursUntilUpdate","duration","diff","asHours","groupedStats","groupBy","stat","startOf","format","savingsPercentages","Object","values","map","statsForDay","name","savings","savings_percent","reduce","prev","cur","stat1","stat2","statsForPairs","coinAmounts","actualCoinAmount","actual_coin_amount","comparisonCoinAmount","comparison_coin_amount","dollarsSpent","totalSpend","total_spend","marketPrice","currentPrice","current_price","coinsPurchased","dcaComparisonAveragePrice","averageDcaPrice","average_dca_price","totalCoinsPurchased","limitStrategyPrice","Math","round","dcaComparisonPrice","latestPrice","parseFloat","dcaComparisonCoinValue","actualCoinValue","getStatsForTicker","findStatsForPair","find","includes","to","style","textDecoration","p","m","sx","color","border","background","fontWeight","mt","flexDirection","w","justifyContent","minWidth","flexWrap","width","ResponsiveContainer","height","BarChart","data","dca","limit","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","LineChart","index","Line","type","yAxisId","getPrices","tickers","Promise","all","getPrice","prices","pricesObj","Table","headers","rows","ml","header","row","cell","padding","Trades","trades","setTrades","setPrices","fetchPrices","getTradesList","trade","timestampms","tradesObj","reverse","ScatterChart","ReferenceLine","y","alwaysShow","label","value","Scatter","price","amount","OpenOrders","orders","setOrders","pair","getOpenOrders","remaining_amount","About","target","href","linkPrefix","ROUTES","path","exact","display","element","localStorage","getItem","dev","prod","App","dashboardMode","setDashboardMode","dashboardInterval","dashboardTimer","setInterval","currentRouteIndex","findIndex","route","window","location","nextRoute","clearInterval","LinkContainer","isActive","children","mr","EnvSelector","env","setEnv","onChange","e","setItem","reload","marginBottom","marginTop","Links","className","checked","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.430a4496.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\nimport { API_URLS, ENV } from \"../App\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        API_URLS.getConfiguration[ENV]\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import { API_URLS, ENV } from \"../App\";\n\nexport const getTradingPairs = () => {\n  return fetch(`${API_URLS.getTradingPairs[ENV]}`)\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        return result;\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n};\n","export const COLORS = {\n  btc: \"orange\",\n  btcusd: \"orange\",\n  eth: \"#407aff\",\n  ethusd: \"#407aff\",\n  comparison: \"grey\",\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  Link,\n  useLocation\n} from \"react-router-dom\";\nimport { groupBy } from \"underscore\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { getStatsForTicker } from \"../helpers/stats\";\nimport { COLORS } from \"../helpers/colors\";\n\nexport const Stats = () => {\n  const location = useLocation();\n  const ticker = location.pathname.split(\"/\")[2];\n  const selectedTicker = ticker === \"*\" ? \"btcusd\" : ticker;\n  const [stats, setStats] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n  \n\n  useEffect(() => {\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n\n    if (!stats) {\n      fetch(API_URLS.getStats[ENV])\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats, tradingPairs, setTradingPairs]);\n\n  if (!stats) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  if (stats.length === 0) {\n    return <Text as=\"h1\">No data yet.</Text>;\n  }\n\n  const statsSortedByDay = stats.sort(\n    (a, b) => moment(a.datetime) - moment(b.datetime)\n  );\n\n  const lastUpdated = moment(\n    statsSortedByDay[statsSortedByDay.length - 1].datetime\n  );\n  const nextUpdate = moment(lastUpdated).add(24, \"hours\");\n\n  const hoursUntilUpdate = moment.duration(nextUpdate.diff(moment())).asHours();\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  const savingsPercentages = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          savings: stat.savings_percent,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [cur.ticker]: cur.savings,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  if (!tradingPairs) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  const statsForPairs = tradingPairs\n    .map(({ name, ticker }) => {\n      return getStatsForTicker({ groupedStats, ticker });\n    });\n\n  if (!statsForPairs) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  const findStatsForPair = (ticker) => statsForPairs.find(stats => [stats.ticker].includes(ticker));\n\n  if (statsForPairs.length !== tradingPairs.length) {\n    return <Text as=\"h1\">Loading stats</Text>;\n  }\n\n  return (\n    <>\n      <Flex>\n        {tradingPairs.map(({ name, ticker }) => (\n          <Link to={`/stats/${ticker}`} style={{ textDecoration: \"none\" }} key={ticker}>\n            <Box\n              p={2}\n              m={1}\n              sx={{\n                color: selectedTicker === ticker ? \"white\" : COLORS[ticker],\n                border: `1px solid ${COLORS[ticker]}`,\n                background: selectedTicker === ticker && COLORS[ticker],\n                fontWeight: \"bold\",\n              }}\n            >\n              {name}\n            </Box>\n          </Link>\n        ))}\n      </Flex>\n      <Text mt=\"2\">Stats update in {Math.round(hoursUntilUpdate)} hours</Text>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        mb=\"4\"\n        mt=\"2\"\n        w={1}\n        justifyContent=\"space-between\"\n      >\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Dollars spent</Text>\n          <Box>\n            {findStatsForPair(selectedTicker) && (\n              <Text key={selectedTicker}>\n                ${findStatsForPair(selectedTicker).totalSpend}\n              </Text>\n            )}\n          </Box>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Coins purchased</Text>\n          {findStatsForPair(selectedTicker) && (\n            <Text key={selectedTicker}>\n              {findStatsForPair(selectedTicker).totalCoinsPurchased}\n            </Text>\n          )}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Dollar-Cost-Average strategy</Text>\n          {findStatsForPair(selectedTicker) && (\n            <Text key={selectedTicker}>\n              ${findStatsForPair(selectedTicker).dcaComparisonPrice}\n            </Text>\n          )}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Limit Strategy</Text>\n          {findStatsForPair(selectedTicker) && (\n            <Text key={selectedTicker}>\n              ${findStatsForPair(selectedTicker).limitStrategyPrice}\n            </Text>\n          )}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>\n            {savingsPercentages[savingsPercentages.length - 1][selectedTicker]}%\n          </Text>\n        </Box>\n      </Flex>\n      <Flex flexDirection={[\"column\", \"row\"]} flexWrap=\"wrap\">\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: findStatsForPair(selectedTicker)?.dcaComparisonPrice,\n                  limit: findStatsForPair(selectedTicker)?.limitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar\n                dataKey=\"limit\"\n                name=\"limit strategy\"\n                fill={COLORS[selectedTicker]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={findStatsForPair(selectedTicker)?.coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey={`${selectedTicker}Comparison`}\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar\n                dataKey={`${selectedTicker}Actual`}\n                name=\"actual\"\n                fill={COLORS[selectedTicker]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">coin value, in dollars</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: findStatsForPair(selectedTicker)?.dcaComparisonCoinValue,\n                  limit: findStatsForPair(selectedTicker)?.actualCoinValue,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar\n                dataKey=\"limit\"\n                name=\"limit strategy\"\n                fill={COLORS[selectedTicker]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Limit strategy advantage over time</Text>\n          <Text>(percentage dollars saved per coin)</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              data={savingsPercentages}\n              margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n            >\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n              <CartesianGrid stroke=\"#333\" />\n              {tradingPairs.map(({ ticker }, index) => (\n                <Line\n                  type=\"monotone\"\n                  dataKey={ticker}\n                  stroke={COLORS[ticker]}\n                  yAxisId={index}\n                  key={ticker}\n                />\n              ))}\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\n\nexport const getStatsForTicker = ({ groupedStats, ticker }) => {\n  if (!ticker || !groupedStats) {\n    return null;\n  }\n  \n  const coinAmounts = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          comparisonCoinAmount: stat.comparison_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}Actual`]: cur.actualCoinAmount,\n            [`${cur.ticker}Comparison`]: cur.comparisonCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dollarsSpent = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          totalSpend: stat.total_spend,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}TotalSpend`]: cur.totalSpend,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const marketPrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          currentPrice: stat.current_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CurrentPrice`]: cur.currentPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const coinsPurchased = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CoinAmount`]: cur.actualCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dcaComparisonAveragePrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          averageDcaPrice: stat.average_dca_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}AverageDcaPrice`]: cur.averageDcaPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const totalSpend =\n    dollarsSpent[dollarsSpent.length - 1][`${ticker}TotalSpend`];\n\n  const totalCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1][`${ticker}CoinAmount`];\n\n  const limitStrategyPrice = Math.round(totalSpend / totalCoinsPurchased);\n  const dcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1][\n      `${ticker}AverageDcaPrice`\n    ];\n\n  const latestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1][`${ticker}CurrentPrice`]\n  );\n  const dcaComparisonCoinValue =\n    coinAmounts[coinAmounts.length - 1][`${ticker}Comparison`] * latestPrice;\n  const actualCoinValue =\n    coinAmounts[coinAmounts.length - 1][`${ticker}Actual`] * latestPrice;\n\n  return {\n    coinAmounts,\n    dollarsSpent,\n    marketPrice,\n    coinsPurchased,\n    dcaComparisonAveragePrice,\n    totalSpend,\n    totalCoinsPurchased,\n    limitStrategyPrice,\n    dcaComparisonPrice,\n    latestPrice,\n    dcaComparisonCoinValue,\n    actualCoinValue,\n    ticker\n  };\n};\n","import { API_URLS, ENV } from \"../App\";\n\nexport const getPrices = (tickers = [\"btcusd\", \"ethusd\"]) => {\n  return Promise.all(\n    tickers.map((ticker) => {\n      return fetch(`${API_URLS.getPrice[ENV]}?ticker=${ticker}`)\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            return { ticker: ticker, result };\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    })\n  ).then((result) => {\n    const prices = Object.values(result);\n    let pricesObj = {};\n    // eslint-disable-next-line array-callback-return\n    prices?.map((ticker) => {\n      if (!prices[ticker.ticker]){\n        prices[ticker.ticker] = 0;\n      }\n      pricesObj[ticker.ticker] = ticker.result;\n    });\n    return pricesObj;\n  });\n};\n","export const Table = ({ headers, rows }) => {\n    return (\n      <table ml=\"4\">\n        <thead>\n          <tr>\n            {headers.map((header) => (\n              <th>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row, index) => (\n            <tr key={index}>\n              {row.map((cell) => (\n                <td\n                  style={{\n                    padding: \".25rem\",\n                  }}\n                >\n                  {cell}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n}","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getPrices } from \"../helpers/prices\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { COLORS } from \"../helpers/colors\";\nimport { Table } from \"../components/Table\";\n\n\nexport const Trades = () => {\n  const [trades, setTrades] = useState();\n  const [prices, setPrices] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchPrices() {\n      const prices = await getPrices();\n      setPrices(prices);\n    }\n\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n\n    if (!prices) {\n      fetchPrices();\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n\n    if (!trades && tradingPairs) {\n      return Promise.all(\n        tradingPairs.map(({ name, ticker }) => {\n          return fetch(`${API_URLS.getTradesList[ENV]}?ticker=${ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades.map((ticker) => {\n          tradesObj[ticker.ticker] = ticker.result.reverse();\n        });\n        setTrades(tradesObj);\n      });\n    }\n  }, [trades, setTrades, prices, setPrices, tradingPairs, setTradingPairs]);\n\n  if (!trades) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h2\" mt=\"4\" ml=\"2\" textAlign=\"left\">\n        Buy History\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {tradingPairs.map(({ name, ticker }) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Box mt=\"2\" mb=\"2\">\n                  <Text as=\"h3\" color={COLORS[ticker]}>\n                    {name}\n                  </Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={trades[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      {prices && prices[ticker] && (\n                        <ReferenceLine\n                          y={prices[ticker]}\n                          stroke={COLORS[ticker]}\n                          alwaysShow={true}\n                          label={{\n                            value: `current price - $${prices[ticker]}`,\n                            fill: \"white\",\n                          }}\n                          color=\"white\"\n                        />\n                      )}\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Table\n                  headers={[\"Date\", \"Price\", \"Amount\"]}\n                  rows={Object.values(trades[ticker])\n                    .reverse()\n                    .map((trade) => ([trade.datetime, `$${trade.price}`, trade.amount]))}\n                />\n              )}\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine,\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getPrices } from \"../helpers/prices\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { COLORS } from \"../helpers/colors\";\nimport { Table } from \"../components/Table\";\n\n\nexport const OpenOrders = () => {\n  const [orders, setOrders] = useState();\n  const [prices, setPrices] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchPrices() {\n      const prices = await getPrices();\n      setPrices(prices);\n    }\n\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n\n    if (!prices) {\n      fetchPrices();\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n    if (!orders && tradingPairs) {\n      return Promise.all(\n        tradingPairs.map((pair) => {\n          return fetch(`${API_URLS.getOpenOrders[ENV]}?ticker=${pair.ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: pair.ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades?.map((ticker) => {\n          tradesObj[ticker?.ticker] = ticker?.result;\n        });\n        setOrders(tradesObj);\n      });\n    }\n  }, [prices, setPrices, orders, setOrders, tradingPairs, setTradingPairs]);\n\n  if (!orders) {\n    return <Text as=\"h1\">Loading orders...</Text>;\n  }\n\n  if (!tradingPairs) {\n    return <Text as=\"h1\">Loading trading pairs...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h1\" mt=\"4\" ml=\"2\" mb=\"2\" textAlign=\"left\">\n        Open Orders\n      </Text>\n\n      <Text textAlign=\"left\" ml=\"2\" mb=\"4\">\n        If the asset's{\" \"}\n        <span style={{ color: \"green\", fontWeight: \"bold\" }}>\n          price (green line)\n        </span>{\" \"}\n        drops down to any of the{\" \"}\n        <strong>white dots (open limit-buy orders)</strong>, the buy order gets\n        automatically triggered. Then, I create new orders based on the new\n        price.\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {tradingPairs.map((pair) => (\n          <Flex\n            key={pair.ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {orders[pair.ticker] && (\n                <Box mt=\"2\" mb=\"2\" width={1}>\n                  <Text as=\"h3\" mb=\"2\" color={COLORS[pair.ticker]}>\n                    {pair.name}\n                  </Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={orders[pair.ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      {prices && prices[pair.ticker] && (\n                        <ReferenceLine\n                          y={prices[pair.ticker]}\n                          stroke={COLORS[pair.ticker]}\n                          alwaysShow={true}\n                          label={{\n                            value: `current price - $${prices[pair.ticker]}`,\n                            fill: \"white\",\n                          }}\n                          color=\"white\"\n                        />\n                      )}\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={pair.ticker} ml=\"2\" width={[1, 1 / 2]}>\n              {orders[pair.ticker] && (\n                <Table\n                  headers={[\"Placed on\", \"Price\", \"Amount\"]}\n                  rows={Object.values(orders[pair.ticker]).map((trade) => [\n                    trade.datetime,\n                    `${trade.price}`,\n                    trade.remaining_amount,\n                  ])}\n                />\n              )}\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import { Text } from \"rebass\";\n\nexport const About = () => {\n  return (\n    <>\n      <Text textAlign=\"left\" ml=\"2\" mb=\"2\">\n        Hi, I'm the dashboard for an asset-buying robot.\n      </Text>\n\n      <Text textAlign=\"left\" ml=\"2\">\n        <a\n          target=\"_blank\"\n          href=\"https://github.com/samjhill/dashboard-limit-bot\"\n        >\n          Github\n        </a>\n      </Text>\n    </>\n  );\n};\n","import { Configuration } from \"../components/Configuration\";\nimport { Stats } from \"../components/Stats\";\nimport { Trades } from \"../components/Trades\";\nimport { OpenOrders } from \"../components/OpenOrders\";\nimport { About } from \"../components/About\";\n\nconst linkPrefix =\n  process.env.NODE_ENV === \"development\" ? \"\" : \"/dashboard-limit-bot\";\n\nexport const ROUTES = [\n  {\n    path: `${linkPrefix}/`,\n    exact: true,\n    display: \"About\",\n    element: <About />\n  },\n  {\n    path: `${linkPrefix}/orders`,\n    display: \"Open Orders\",\n    element: <OpenOrders />,\n  },\n  {\n    path: `${linkPrefix}/stats/*`,\n    display: \"Stats\",\n    element: <Stats />,\n  },\n  {\n    path: `${linkPrefix}/trades`,\n    display: \"Buy History\",\n    element: <Trades />,\n  },\n  {\n    path: `${linkPrefix}/configuration`,\n    display: \"Configuration\",\n    element: <Configuration />,\n  },\n];\n","import \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useLocation,\n} from \"react-router-dom\";\nimport { Box, Flex, Text } from \"rebass\";\nimport React, { useState, useEffect } from \"react\";\nimport { ROUTES } from \"./helpers/routes\";\n\nexport const ENV = localStorage.getItem(\"env\") || \"dev\";\n\nexport const API_URLS = {\n  getPrice: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_price\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_price\",\n  },\n  getOpenOrders: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_open_orders\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_open_orders\",\n  },\n  getTradesList: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_trades_list\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_trades_list\",\n  },\n  getConfiguration: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/configuration\",\n  },\n  getStats: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/stats\",\n  },\n  getTradingPairs: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/trading_pairs\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/trading_pairs\",\n  },\n};\n\nfunction App() {\n  const [dashboardMode, setDashboardMode] = useState(\n    localStorage.getItem(\"dashboardModeIsEnabled\") === \"true\"\n  );\n  const [dashboardInterval, setDashboardInterval] = useState(15000);\n\n  useEffect(() => {\n    let dashboardTimer;\n    if (dashboardMode) {\n      dashboardTimer = setInterval(() => {\n        const currentRouteIndex = ROUTES.findIndex((route) =>\n          window.location.pathname.includes(route.path)\n        );\n        const nextRoute = ROUTES[(currentRouteIndex + 1) % ROUTES.length];\n        window.location.href = nextRoute.path;\n      }, dashboardInterval);\n    } else {\n      clearInterval(dashboardTimer);\n    }\n  }, [dashboardMode, setDashboardMode, dashboardInterval]);\n\n  const LinkContainer = ({ isActive = false, children }) => (\n    <Box\n      mb=\"4\"\n      mr=\"2\"\n      w=\"100%\"\n      sx={{\n        a: {\n          width: \"100%\",\n          background: isActive ? \"white\" : \"none\",\n          color: isActive ? \"#333\" : \"white\",\n          border: \"1px solid white\",\n          padding: \".5rem\",\n          textDecoration: \"none\",\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n\n  const EnvSelector = () => {\n    const [env, setEnv] = useState(localStorage.getItem(\"env\") || \"dev\");\n\n    return (\n      <select\n        value={env}\n        onChange={(e) => {\n          setEnv(e.target.value);\n          localStorage.setItem(\"env\", e.target.value);\n          window.location.reload();\n        }}\n        style={{\n          marginBottom: \"1rem\",\n          marginTop: \".5rem\",\n          padding: \".5rem\",\n        }}\n      >\n        <option value=\"dev\">dev</option>\n        <option value=\"prod\">prod</option>\n      </select>\n    );\n  };\n\n  const Links = () => {\n    const location = useLocation();\n\n    return (\n      <Flex flexWrap=\"wrap\" mt=\"3\" ml=\"2\" flexDirection={[\"row\"]}>\n        {ROUTES.map((route) => (\n          <LinkContainer\n            isActive={\n              route.exact\n                ? location.pathname === route.path\n                : location.pathname.includes(route.path)\n            }\n            key={route.path}\n          >\n            <Link to={route.path}>{route.display}</Link>\n          </LinkContainer>\n        ))}\n      </Flex>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Flex p=\"2\">\n            <EnvSelector />\n            <Box ml=\"3\">\n              <label>\n                <input\n                  checked={dashboardMode}\n                  type=\"checkbox\"\n                  onChange={() => {\n                    localStorage.setItem(\n                      \"dashboardModeIsEnabled\",\n                      !dashboardMode\n                    );\n                    setDashboardMode(!dashboardMode);\n                  }}\n                />\n                Dashboard Mode\n              </label>\n              <Text>\n                Flips through the pages every {dashboardInterval / 1000} seconds\n              </Text>\n            </Box>\n          </Flex>\n          <Links />\n          <Routes>\n            {ROUTES.map((route) => (\n              <Route\n                path={route.path}\n                exact={route.exact}\n                element={route.element}\n                key={route.path}\n              />\n            ))}\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}