{"version":3,"sources":["components/Configuration.js","components/Stats.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","COLORS","Stats","stats","setStats","log","statsSortedByDay","sort","a","b","moment","datetime","lastUpdated","length","nextUpdate","add","hoursUntilUpdate","duration","diff","asHours","groupedStats","groupBy","stat","startOf","format","savingsPercentages","Object","values","map","statsForDay","name","savings","savings_percent","ticker","reduce","prev","cur","stat1","stat2","coinAmounts","actualCoinAmount","actual_coin_amount","comparisonCoinAmount","comparison_coin_amount","dollarsSpent","totalSpend","total_spend","coinsPurchased","dcaComparisonAveragePrice","averageDcaPrice","average_dca_price","btcDollarsSpent","btcusdTotalSpend","ethDollarsSpent","ethusdTotalSpend","btcCoinsPurchased","btcusdCoinAmount","ethCoinsPurchased","ethusdCoinAmount","btcLimitStrategyPrice","Math","round","btcDcaComparisonPrice","btcusdAverageDcaPrice","ethLimitStrategyPrice","ethDcaComparisonPrice","ethusdAverageDcaPrice","mt","flexDirection","w","justifyContent","p","minWidth","btcusd","ethusd","width","ResponsiveContainer","height","BarChart","data","dca","limit","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","LineChart","Line","type","yAxisId","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fabeda7a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\"\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return null;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { groupBy } from \"underscore\";\n\nconst COLORS = {\n  btc: \"orange\",\n  eth: \"#407aff\",\n  comparison: \"grey\",\n};\n\nexport const Stats = () => {\n  const [stats, setStats] = useState();\n\n  useEffect(() => {\n    if (!stats) {\n      fetch(\"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n            console.log(result)\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats]);\n\n  if (!stats) {\n    return null;\n  }\n\n  const statsSortedByDay = stats.sort((a, b) => moment(a.datetime) - moment(b.datetime));\n\n  const lastUpdated = moment(statsSortedByDay[statsSortedByDay.length - 1].datetime);\n  const nextUpdate = moment(lastUpdated).add(24, \"hours\"); \n\n  const hoursUntilUpdate = moment.duration(\n    nextUpdate.diff(moment())\n  ).asHours();\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  const savingsPercentages = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          savings: stat.savings_percent,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [cur.ticker]: cur.savings,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n\n  const coinAmounts = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          comparisonCoinAmount: stat.comparison_coin_amount,\n          ticker: stat.ticker\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}Actual`]: cur.actualCoinAmount,\n            [`${cur.ticker}Comparison`]: cur.comparisonCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n\n    const dollarsSpent = Object.values(groupedStats)\n      .map((statsForDay) =>\n        statsForDay\n          .map((stat) => ({\n            name: moment(stat.datetime).format(\"MM/DD/YY\"),\n            totalSpend: stat.total_spend,\n            ticker: stat.ticker,\n          }))\n          .reduce(\n            (prev, cur) => ({\n              ...prev,\n              name: cur.name,\n              [`${cur.ticker}TotalSpend`]: cur.totalSpend,\n            }),\n            {}\n          )\n      )\n      .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n\n    const coinsPurchased = Object.values(groupedStats)\n      .map((statsForDay) =>\n        statsForDay\n          .map((stat) => ({\n            name: moment(stat.datetime).format(\"MM/DD/YY\"),\n            actualCoinAmount: stat.actual_coin_amount,\n            ticker: stat.ticker,\n          }))\n          .reduce(\n            (prev, cur) => ({\n              ...prev,\n              name: cur.name,\n              [`${cur.ticker}CoinAmount`]: cur.actualCoinAmount,\n            }),\n            {}\n          )\n      )\n      .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n    \n    const dcaComparisonAveragePrice = Object.values(groupedStats)\n      .map((statsForDay) =>\n        statsForDay\n          .map((stat) => ({\n            name: moment(stat.datetime).format(\"MM/DD/YY\"),\n            averageDcaPrice: stat.average_dca_price,\n            ticker: stat.ticker,\n          }))\n          .reduce(\n            (prev, cur) => ({\n              ...prev,\n              name: cur.name,\n              [`${cur.ticker}AverageDcaPrice`]: cur.averageDcaPrice,\n            }),\n            {}\n          )\n      )\n      .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const btcDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].btcusdTotalSpend;\n  const ethDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].ethusdTotalSpend;\n\n  const btcCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].btcusdCoinAmount;\n\n  const ethCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].ethusdCoinAmount;\n\n  const btcLimitStrategyPrice = Math.round(btcDollarsSpent / btcCoinsPurchased);\n  const btcDcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1]\n      .btcusdAverageDcaPrice;\n\n  const ethLimitStrategyPrice = Math.round(ethDollarsSpent / ethCoinsPurchased);\n  const ethDcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1]\n      .ethusdAverageDcaPrice;\n\n  return (\n    <>\n      <Text mt=\"2\">Stats update in {Math.round(hoursUntilUpdate)} hours</Text>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        mb=\"4\"\n        mt=\"2\"\n        w={1}\n        justifyContent=\"space-between\"\n      >\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Dollars spent</Text>\n          <Text>Bitcoin: ${btcDollarsSpent}</Text>\n          <Text>Ethereum: ${ethDollarsSpent}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Coins purchased</Text>\n          <Text>Bitcoin: {btcCoinsPurchased}</Text>\n          <Text>Ethereum: {ethCoinsPurchased}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Dollar-Cost-Average strategy</Text>\n          <Text>Bitcoin: ${btcDcaComparisonPrice}</Text>\n          <Text>Ethereum: ${ethDcaComparisonPrice}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Limit Strategy</Text>\n          <Text>Bitcoin: ${btcLimitStrategyPrice}</Text>\n          <Text>Ethereum: ${ethLimitStrategyPrice}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>\n            Bitcoin: {savingsPercentages[savingsPercentages.length - 1].btcusd}%\n          </Text>\n          <Text>\n            Ethereum: {savingsPercentages[savingsPercentages.length - 1].ethusd}\n            %\n          </Text>\n        </Box>\n      </Flex>\n      <Flex flexDirection={[\"column\", \"row\"]}>\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: btcDcaComparisonPrice,\n                  limit: btcLimitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: ethDcaComparisonPrice,\n                  limit: ethLimitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey=\"btcusdComparison\"\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar dataKey=\"btcusdActual\" name=\"actual\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              width={400}\n              height={400}\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey=\"ethusdComparison\"\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar dataKey=\"ethusdActual\" name=\"actual\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n\n      <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n        <Text as=\"h3\">Limit strategy advantage over time</Text>\n        <Text>(percentage dollars saved per coin)</Text>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart\n            data={savingsPercentages}\n            margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n          >\n            <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n            <Tooltip />\n            <Legend />\n            <CartesianGrid stroke=\"#333\" />\n            <Line\n              type=\"monotone\"\n              dataKey=\"btcusd\"\n              stroke={COLORS.btc}\n              yAxisId={0}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"ethusd\"\n              stroke={COLORS.eth}\n              yAxisId={1}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Box>\n    </>\n  );\n};\n","import './App.css';\nimport { Configuration } from \"./components/Configuration\";\nimport { Stats } from \"./components/Stats\";\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Stats />\n      <Configuration />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}