{"version":3,"sources":["components/Configuration.js","components/Stats.js","components/Trades.js","components/OpenOrders.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","COLORS","Stats","stats","setStats","statsSortedByDay","sort","a","b","moment","datetime","nextUpdate","length","add","hoursUntilUpdate","duration","diff","asHours","groupedStats","groupBy","stat","startOf","format","savingsPercentages","Object","values","map","statsForDay","name","savings","savings_percent","ticker","reduce","prev","cur","stat1","stat2","coinAmounts","actualCoinAmount","actual_coin_amount","comparisonCoinAmount","comparison_coin_amount","dollarsSpent","totalSpend","total_spend","marketPrice","currentPrice","current_price","coinsPurchased","dcaComparisonAveragePrice","averageDcaPrice","average_dca_price","btcDollarsSpent","btcusdTotalSpend","ethDollarsSpent","ethusdTotalSpend","btcCoinsPurchased","btcusdCoinAmount","ethCoinsPurchased","ethusdCoinAmount","btcLimitStrategyPrice","Math","round","btcDcaComparisonPrice","btcusdAverageDcaPrice","ethLimitStrategyPrice","ethDcaComparisonPrice","ethusdAverageDcaPrice","btcLatestPrice","parseFloat","btcusdCurrentPrice","ethLatestPrice","ethusdCurrentPrice","btcDcaComparisonCoinValue","btcusdComparison","btcActualCoinValue","btcusdActual","ethDcaComparisonCoinValue","ethusdComparison","ethActualCoinValue","ethusdActual","mt","flexDirection","w","justifyContent","p","minWidth","btcusd","ethusd","flexWrap","width","ResponsiveContainer","height","BarChart","data","dca","limit","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","LineChart","Line","type","yAxisId","TICKERS","Trades","trades","setTrades","Promise","all","trade","timestampms","tradesObj","ml","ScatterChart","Scatter","price","amount","tid","OpenOrders","orders","setOrders","prices","setPrices","pricesObj","ReferenceLine","y","alwaysShow","label","value","color","remaining_amount","App","className","style","listStyle","to","path","exact","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAGaA,EAAgB,WAAO,IAAD,EACLC,qBADK,mBAC1BC,EAD0B,KAClBC,EADkB,KAoBjC,OAjBAC,qBAAU,WACHF,GACHG,MACE,4EAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCN,EAAUM,MAEZ,SAACC,GACCC,QAAQD,MAAMA,QAIrB,CAACR,EAAQC,IAEPD,EAKH,eAAC,IAAD,CAAKU,UAAU,OAAOC,GAAG,IAAzB,UACE,cAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,IAAjB,2BAIA,eAAC,IAAD,CAAKA,GAAG,IAAR,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,oBACA,eAAC,IAAD,oCAA6BZ,EAAOc,uBACpC,eAAC,IAAD,qCAA8Bd,EAAOe,wBACrC,eAAC,IAAD,sCAA+Bf,EAAOgB,4BAGxC,eAAC,IAAD,CAAKH,GAAG,IAAR,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,oBACA,eAAC,IAAD,gCAAyBZ,EAAOiB,cAChC,eAAC,IAAD,wCAAwD,IAAvBjB,EAAOkB,cAAxC,OACA,eAAC,IAAD,sDAC2ClB,EAAOmB,0BArB/C,M,gICPLC,EACC,SADDA,EAEC,UAFDA,EAGQ,OAGDC,EAAQ,WAAO,IAAD,EACCtB,qBADD,mBAClBuB,EADkB,KACXC,EADW,KAkBzB,GAfArB,qBAAU,WACHoB,GACHnB,MAAM,oEACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCgB,EAAShB,MAEX,SAACC,GACCC,QAAQD,MAAMA,QAIrB,CAACc,EAAOC,KAEND,EACH,OAAO,KAGT,IAAME,EAAmBF,EAAMG,MAC7B,SAACC,EAAGC,GAAJ,OAAUC,IAAOF,EAAEG,UAAYD,IAAOD,EAAEE,aAMpCC,EAHcF,IAClBJ,EAAiBA,EAAiBO,OAAS,GAAGF,UAEjBG,IAAI,GAAI,SAEjCC,EAAmBL,IAAOM,SAASJ,EAAWK,KAAKP,QAAWQ,UAE9DC,EAAeC,YAAQhB,GAAO,SAACiB,GACnC,OAAOX,IAAOW,EAAKV,UAAUW,QAAQ,OAAOC,YAGxCC,EAAqBC,OAAOC,OAAOP,GACtCQ,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACN,GAAD,MAAW,CACdQ,KAAMnB,IAAOW,EAAKV,UAAUY,OAAO,YACnCO,QAAST,EAAKU,gBACdC,OAAQX,EAAKW,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MACTM,EAAIH,OAASG,EAAIL,YAEpB,OAGLvB,MAAK,SAAC6B,EAAOC,GAAR,OAAkB3B,IAAO0B,EAAMP,MAAQnB,IAAO2B,EAAMR,SAEtDS,EAAcb,OAAOC,OAAOP,GAC/BQ,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACN,GAAD,MAAW,CACdQ,KAAMnB,IAAOW,EAAKV,UAAUY,OAAO,YACnCgB,iBAAkBlB,EAAKmB,mBACvBC,qBAAsBpB,EAAKqB,uBAC3BV,OAAQX,EAAKW,WAEdC,QACC,SAACC,EAAMC,GAAP,yBAAC,eACID,GADL,OAEEL,KAAMM,EAAIN,MAFZ,wBAGMM,EAAIH,OAHV,UAG2BG,EAAII,kBAH/B,wBAIMJ,EAAIH,OAJV,cAI+BG,EAAIM,sBAJnC,MAMA,OAGLlC,MAAK,SAAC6B,EAAOC,GAAR,OAAkB3B,IAAO0B,EAAMP,MAAQnB,IAAO2B,EAAMR,SAEtDc,EAAelB,OAAOC,OAAOP,GAChCQ,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACN,GAAD,MAAW,CACdQ,KAAMnB,IAAOW,EAAKV,UAAUY,OAAO,YACnCqB,WAAYvB,EAAKwB,YACjBb,OAAQX,EAAKW,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MAFZ,UAGMM,EAAIH,OAHV,cAG+BG,EAAIS,eAEnC,OAGLrC,MAAK,SAAC6B,EAAOC,GAAR,OAAkB3B,IAAO0B,EAAMP,MAAQnB,IAAO2B,EAAMR,SAEtDiB,EAAcrB,OAAOC,OAAOP,GAC/BQ,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACN,GAAD,MAAW,CACdQ,KAAMnB,IAAOW,EAAKV,UAAUY,OAAO,YACnCwB,aAAc1B,EAAK2B,cACnBhB,OAAQX,EAAKW,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MAFZ,UAGMM,EAAIH,OAHV,gBAGiCG,EAAIY,iBAErC,OAGLxC,MAAK,SAAC6B,EAAOC,GAAR,OAAkB3B,IAAO0B,EAAMP,MAAQnB,IAAO2B,EAAMR,SAEtDoB,EAAiBxB,OAAOC,OAAOP,GAClCQ,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACN,GAAD,MAAW,CACdQ,KAAMnB,IAAOW,EAAKV,UAAUY,OAAO,YACnCgB,iBAAkBlB,EAAKmB,mBACvBR,OAAQX,EAAKW,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MAFZ,UAGMM,EAAIH,OAHV,cAG+BG,EAAII,qBAEnC,OAGLhC,MAAK,SAAC6B,EAAOC,GAAR,OAAkB3B,IAAO0B,EAAMP,MAAQnB,IAAO2B,EAAMR,SAEtDqB,EAA4BzB,OAAOC,OAAOP,GAC7CQ,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACN,GAAD,MAAW,CACdQ,KAAMnB,IAAOW,EAAKV,UAAUY,OAAO,YACnC4B,gBAAiB9B,EAAK+B,kBACtBpB,OAAQX,EAAKW,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MAFZ,UAGMM,EAAIH,OAHV,mBAGoCG,EAAIgB,oBAExC,OAGL5C,MAAK,SAAC6B,EAAOC,GAAR,OAAkB3B,IAAO0B,EAAMP,MAAQnB,IAAO2B,EAAMR,SAEtDwB,EACJV,EAAaA,EAAa9B,OAAS,GAAGyC,iBAClCC,EACJZ,EAAaA,EAAa9B,OAAS,GAAG2C,iBAElCC,EACJR,EAAeA,EAAepC,OAAS,GAAG6C,iBAEtCC,EACJV,EAAeA,EAAepC,OAAS,GAAG+C,iBAEtCC,EAAwBC,KAAKC,MAAMV,EAAkBI,GACrDO,EACJd,EAA0BA,EAA0BrC,OAAS,GAC1DoD,sBAECC,EAAwBJ,KAAKC,MAAMR,EAAkBI,GACrDQ,EACJjB,EAA0BA,EAA0BrC,OAAS,GAC1DuD,sBAECC,EAAiBC,WACrBxB,EAAYA,EAAYjC,OAAS,GAAG0D,oBAEhCC,EAAiBF,WACrBxB,EAAYA,EAAYjC,OAAS,GAAG4D,oBAGhCC,EACJpC,EAAYA,EAAYzB,OAAS,GAAG8D,iBAAmBN,EACnDO,EACJtC,EAAYA,EAAYzB,OAAS,GAAGgE,aAAeR,EAC/CS,EACJxC,EAAYA,EAAYzB,OAAS,GAAGkE,iBAAmBP,EACnDQ,EACJ1C,EAAYA,EAAYzB,OAAS,GAAGoE,aAAeT,EAErD,OACE,qCACE,eAAC,IAAD,CAAMU,GAAG,IAAT,6BAA8BpB,KAAKC,MAAMhD,GAAzC,YACA,eAAC,IAAD,CACEoE,cAAe,CAAC,SAAU,OAC1BxF,GAAG,IACHuF,GAAG,IACHE,EAAG,EACHC,eAAe,gBALjB,UAOE,eAAC,IAAD,CAAK7F,UAAU,OAAO8F,EAAE,IAAIC,SAAS,QAArC,UACE,cAAC,IAAD,CAAM7F,GAAG,KAAT,2BACA,eAAC,IAAD,wBAAiB2D,KACjB,eAAC,IAAD,yBAAkBE,QAEpB,eAAC,IAAD,CAAK/D,UAAU,OAAO8F,EAAE,IAAIC,SAAS,QAArC,UACE,cAAC,IAAD,CAAM7F,GAAG,KAAT,6BACA,eAAC,IAAD,uBAAgB+D,KAChB,eAAC,IAAD,wBAAiBE,QAEnB,eAAC,IAAD,CAAKnE,UAAU,OAAO8F,EAAE,IAAIC,SAAS,QAArC,UACE,cAAC,IAAD,CAAM7F,GAAG,KAAT,0DACA,eAAC,IAAD,wBAAiBsE,KACjB,eAAC,IAAD,yBAAkBG,QAEpB,eAAC,IAAD,CAAK3E,UAAU,OAAO8F,EAAE,IAAIC,SAAS,QAArC,UACE,cAAC,IAAD,CAAM7F,GAAG,KAAT,4CACA,eAAC,IAAD,wBAAiBmE,KACjB,eAAC,IAAD,yBAAkBK,QAEpB,eAAC,IAAD,CAAK1E,UAAU,OAAO8F,EAAE,IAAIC,SAAS,QAArC,UACE,cAAC,IAAD,CAAM7F,GAAG,KAAT,uCACA,eAAC,IAAD,uBACY8B,EAAmBA,EAAmBX,OAAS,GAAG2E,OAD9D,OAGA,eAAC,IAAD,wBACahE,EAAmBA,EAAmBX,OAAS,GAAG4E,OAD/D,aAMJ,eAAC,IAAD,CAAMN,cAAe,CAAC,SAAU,OAAQO,SAAS,OAAjD,UACE,eAAC,IAAD,CAAKC,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,gDACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEC,KAAM,CACJ,CACEC,IAAKhC,EACLiC,MAAOpC,IAGXqC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GAXZ,UAcE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAKJ,QAAQ,MAAM7E,KAAK,eAAekF,KAAM7G,IAC7C,cAAC4G,EAAA,EAAD,CAAKJ,QAAQ,QAAQ7E,KAAK,iBAAiBkF,KAAM7G,YAIvD,eAAC,IAAD,CAAKyF,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,iDACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEC,KAAM,CACJ,CACEC,IAAK7B,EACL8B,MAAO/B,IAGXgC,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GAXZ,UAcE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAKJ,QAAQ,MAAM7E,KAAK,eAAekF,KAAM7G,IAC7C,cAAC4G,EAAA,EAAD,CAAKJ,QAAQ,QAAQ7E,KAAK,iBAAiBkF,KAAM7G,YAKvD,eAAC,IAAD,CAAKyF,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,mDACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEC,KAAMzD,EACN4D,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GANZ,UASE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CACEJ,QAAQ,mBACR7E,KAAK,aACLkF,KAAM7G,IAER,cAAC4G,EAAA,EAAD,CAAKJ,QAAQ,eAAe7E,KAAK,SAASkF,KAAM7G,YAKtD,eAAC,IAAD,CAAKyF,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,oDACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEH,MAAO,IACPE,OAAQ,IACRE,KAAMzD,EACN4D,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,UAWE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CACEJ,QAAQ,mBACR7E,KAAK,aACLkF,KAAM7G,IAER,cAAC4G,EAAA,EAAD,CAAKJ,QAAQ,eAAe7E,KAAK,SAASkF,KAAM7G,YAKtD,eAAC,IAAD,CAAKyF,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,6CACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEC,KAAM,CACJ,CACEC,IAAKtB,EACLuB,MAAOrB,IAGXsB,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GAXZ,UAcE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAKJ,QAAQ,MAAM7E,KAAK,eAAekF,KAAM7G,IAC7C,cAAC4G,EAAA,EAAD,CAAKJ,QAAQ,QAAQ7E,KAAK,iBAAiBkF,KAAM7G,YAKvD,eAAC,IAAD,CAAKyF,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,8CACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEC,KAAM,CACJ,CACEC,IAAKlB,EACLmB,MAAOjB,IAGXkB,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GAXZ,UAcE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAKJ,QAAQ,MAAM7E,KAAK,eAAekF,KAAM7G,IAC7C,cAAC4G,EAAA,EAAD,CAAKJ,QAAQ,QAAQ7E,KAAK,iBAAiBkF,KAAM7G,YAKvD,eAAC,IAAD,CAAKyF,MAAO,CAAC,EAAG,EAAI,GAAIT,GAAG,IAAIvF,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,gDACA,cAAC,IAAD,kDACA,cAACkG,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACmB,EAAA,EAAD,CACEjB,KAAMvE,EACN0E,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,GAAIC,OAAQ,GAFhD,UAIE,cAACG,EAAA,EAAD,CAAOC,QAAQ,OAAOF,OAAO,YAC7B,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACN,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACS,EAAA,EAAD,CACEC,KAAK,WACLR,QAAQ,SACRF,OAAQtG,EACRiH,QAAS,IAEX,cAACF,EAAA,EAAD,CACEC,KAAK,WACLR,QAAQ,SACRF,OAAQtG,EACRiH,QAAS,mB,kBCpbnBC,EAAU,CAAC,SAAU,UAEdC,EAAS,WAAO,IAAD,EACExI,qBADF,mBACnByI,EADmB,KACXC,EADW,KAoC1B,OAjCAvI,qBAAU,WACR,IAAKsI,EACH,OAAOE,QAAQC,IACbL,EAAQzF,KAAI,SAACK,GACX,OAAO/C,MAAM,qFAAD,OAC2E+C,IAEpF9C,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,IAAMiI,EAASjI,EAAOsC,KAAI,SAAC+F,GAAD,mBAAC,eACtBA,GADqB,IAExB/G,SAAUD,IAAOgH,EAAMC,aAAapG,OAAO,qBAE7C,MAAO,CAAES,OAAQA,EAAQ3C,OAAQiI,MAEnC,SAAChI,GACCC,QAAQD,MAAMA,UAItBJ,MAAK,SAACG,GACN,IAAMiI,EAAS7F,OAAOC,OAAOrC,GACzBuI,EAAY,GAEhBN,EAAO3F,KAAI,SAACK,GACV4F,EAAU5F,EAAOA,QAAUA,EAAO3C,UAEpCkI,EAAUK,QAGb,CAACN,EAAQC,IAEPD,EAKH,qCACE,cAAC,IAAD,CAAM5H,GAAG,KAAKwF,GAAG,IAAI2C,GAAG,IAAIrI,UAAU,OAAtC,yBAIA,cAAC,IAAD,CAAMmG,MAAO,EAAGR,cAAe,CAAC,SAAU,OAA1C,SACGiC,EAAQzF,KAAI,SAACK,GAAD,OACX,eAAC,IAAD,CAEE2D,MAAO,CAAC,EAAG,IACXR,cAAe,CAAC,SAAU,OAH5B,UAKE,cAAC,IAAD,CAAKQ,MAAO,CAAC,EAAG,IAAhB,SACG2B,EAAOtF,IACN,eAAC,IAAD,CAAKkD,GAAG,IAAIvF,GAAG,IAAf,UACE,eAAC,IAAD,CAAMD,GAAG,KAAT,0BAA4BsC,KAC5B,cAAC4D,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACiC,EAAA,EAAD,CACE/B,KAAMuB,EAAOtF,GACbkE,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GANZ,UASE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWF,OAAO,YACjC,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAEA,cAACkB,EAAA,EAAD,CAASrB,QAAQ,QAAQK,KAAK,oBAOxC,cAAC,IAAD,CAAkBc,GAAG,IAAIlC,MAAO,CAAC,EAAG,IAApC,SACE,wBAAOkC,GAAG,IAAV,UACE,gCACE,+BACE,sCACA,uCACA,6CAGJ,gCACGP,EAAOtF,IACNP,OAAOC,OAAO4F,EAAOtF,IAASL,KAAI,SAAC+F,GAAD,OAChC,+BACE,6BAAKA,EAAM/G,WACX,mCAAM+G,EAAMM,SACZ,6BAAKN,EAAMO,WAHJP,EAAMQ,cAZflG,KA/BLA,WAZN,M,SCtCLoF,EAAU,CAAC,SAAU,UAEde,EAAa,WAAO,IAAD,EACFtJ,qBADE,mBACvBuJ,EADuB,KACfC,EADe,OAEFxJ,qBAFE,mBAEvByJ,EAFuB,KAEfC,EAFe,KA+D9B,OA3DAvJ,qBAAU,WACR,OAAKsJ,EA0BAF,OAAL,EACSZ,QAAQC,IACbL,EAAQzF,KAAI,SAACK,GACX,OAAO/C,MAAM,qFAAD,OAC2E+C,IAEpF9C,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,IAAMiI,EAASjI,EAAOsC,KAAI,SAAC+F,GAAD,mBAAC,eACtBA,GADqB,IAExB/G,SAAUD,IAAOgH,EAAMC,aAAapG,OAAO,qBAE7C,MAAO,CAAES,OAAQA,EAAQ3C,OAAQiI,MAEnC,SAAChI,GACCC,QAAQD,MAAMA,UAItBJ,MAAK,SAACG,GACN,IAAMiI,EAAS7F,OAAOC,OAAOrC,GACzBuI,EAAY,GAEV,OAANN,QAAM,IAANA,KAAQ3F,KAAI,SAACK,GACX4F,EAAU5F,EAAOA,QAAUA,EAAO3C,UAEpCgJ,EAAUT,MApDLJ,QAAQC,IACbL,EAAQzF,KAAI,SAACK,GACX,OAAO/C,MAAM,+EAAD,OACqE+C,IAE9E9C,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,MAAO,CAAE2C,OAAQA,EAAQ3C,aAE3B,SAACC,GACCC,QAAQD,MAAMA,UAItBJ,MAAK,SAACG,GACN,IAAMiJ,EAAS7G,OAAOC,OAAOrC,GACzBmJ,EAAY,GAEV,OAANF,QAAM,IAANA,KAAQ3G,KAAI,SAACK,GACXwG,EAAUxG,EAAOA,QAAUA,EAAO3C,UAEpCkJ,EAAUC,QAiCb,CAACF,EAAQC,EAAWH,EAAQC,IAE1BD,EAKH,qCACE,cAAC,IAAD,CAAM1I,GAAG,KAAKwF,GAAG,IAAI2C,GAAG,IAAIrI,UAAU,OAAtC,yBAIA,cAAC,IAAD,CAAMmG,MAAO,EAAGR,cAAe,CAAC,SAAU,OAA1C,SACGiC,EAAQzF,KAAI,SAACK,GAAD,OACX,eAAC,IAAD,CAEE2D,MAAO,CAAC,EAAG,IACXR,cAAe,CAAC,SAAU,OAH5B,UAKE,cAAC,IAAD,CAAKQ,MAAO,CAAC,EAAG,IAAhB,SACGyC,EAAOpG,IACN,eAAC,IAAD,CAAKkD,GAAG,IAAIvF,GAAG,IAAIgG,MAAO,EAA1B,UACE,eAAC,IAAD,CAAMjG,GAAG,KAAT,0BAA4BsC,KAC5B,cAAC4D,EAAA,EAAD,CAAqBD,MAAM,OAAOE,OAAQ,IAA1C,SACE,eAACiC,EAAA,EAAD,CACE/B,KAAMqC,EAAOpG,GACbkE,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GANZ,UASE,cAACC,EAAA,EAAD,CAAeC,OAAO,SACtB,cAACC,EAAA,EAAD,CAAOC,QAAQ,WAAWF,OAAO,YACjC,cAACG,EAAA,EAAD,CAAOH,OAAO,YACd,cAACI,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAAC4B,EAAA,EAAD,CACEC,EAAGJ,EAAOtG,GACVwE,OAAO,QACPmC,YAAY,EACZC,MAAO,CAAEC,MAAO,gBAAiB9B,KAAM,SACvC+B,MAAM,UAER,cAACf,EAAA,EAAD,CAASrB,QAAQ,QAAQK,KAAK,oBAOxC,cAAC,IAAD,CAAkBc,GAAG,IAAIlC,MAAO,CAAC,EAAG,IAApC,SACE,wBAAOkC,GAAG,IAAV,UACE,gCACE,+BACE,2CACA,uCACA,6CAGJ,gCACGO,EAAOpG,IACNP,OAAOC,OAAO0G,EAAOpG,IAASL,KAAI,SAAC+F,GAAD,OAChC,+BACE,6BAAKA,EAAM/G,WACX,mCAAM+G,EAAMM,SACZ,6BAAKN,EAAMqB,qBAHJrB,EAAMQ,cAZflG,KArCLA,WAZN,M,gBCxCIgH,MAlCf,WAEE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,UACE,gCACE,qBAAIC,MAAO,CAAEC,UAAW,OAAQ3J,UAAW,QAA3C,UACE,6BACE,cAAC,IAAD,CAAM4J,GAAG,UAAT,2BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,UAAT,2BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,iBAAT,gCAIJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOF,KAAK,UAAUE,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOF,KAAK,SAASE,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOF,KAAK,UAAUE,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOF,KAAK,iBAAiBE,QAAS,cAAC,EAAD,iBCrBnCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxK,MAAK,YAAkD,IAA/CyK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.26f39e07.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\"\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return null;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { groupBy } from \"underscore\";\n\nconst COLORS = {\n  btc: \"orange\",\n  eth: \"#407aff\",\n  comparison: \"grey\",\n};\n\nexport const Stats = () => {\n  const [stats, setStats] = useState();\n\n  useEffect(() => {\n    if (!stats) {\n      fetch(\"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats]);\n\n  if (!stats) {\n    return null;\n  }\n\n  const statsSortedByDay = stats.sort(\n    (a, b) => moment(a.datetime) - moment(b.datetime)\n  );\n\n  const lastUpdated = moment(\n    statsSortedByDay[statsSortedByDay.length - 1].datetime\n  );\n  const nextUpdate = lastUpdated.add(24, \"hours\");\n\n  const hoursUntilUpdate = moment.duration(nextUpdate.diff(moment())).asHours();\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  const savingsPercentages = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          savings: stat.savings_percent,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [cur.ticker]: cur.savings,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const coinAmounts = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          comparisonCoinAmount: stat.comparison_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}Actual`]: cur.actualCoinAmount,\n            [`${cur.ticker}Comparison`]: cur.comparisonCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dollarsSpent = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          totalSpend: stat.total_spend,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}TotalSpend`]: cur.totalSpend,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const marketPrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          currentPrice: stat.current_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CurrentPrice`]: cur.currentPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const coinsPurchased = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CoinAmount`]: cur.actualCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dcaComparisonAveragePrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          averageDcaPrice: stat.average_dca_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}AverageDcaPrice`]: cur.averageDcaPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const btcDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].btcusdTotalSpend;\n  const ethDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].ethusdTotalSpend;\n\n  const btcCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].btcusdCoinAmount;\n\n  const ethCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].ethusdCoinAmount;\n\n  const btcLimitStrategyPrice = Math.round(btcDollarsSpent / btcCoinsPurchased);\n  const btcDcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1]\n      .btcusdAverageDcaPrice;\n\n  const ethLimitStrategyPrice = Math.round(ethDollarsSpent / ethCoinsPurchased);\n  const ethDcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1]\n      .ethusdAverageDcaPrice;\n\n  const btcLatestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1].btcusdCurrentPrice\n  );\n  const ethLatestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1].ethusdCurrentPrice\n  );\n\n  const btcDcaComparisonCoinValue =\n    coinAmounts[coinAmounts.length - 1].btcusdComparison * btcLatestPrice;\n  const btcActualCoinValue =\n    coinAmounts[coinAmounts.length - 1].btcusdActual * btcLatestPrice;\n  const ethDcaComparisonCoinValue =\n    coinAmounts[coinAmounts.length - 1].ethusdComparison * ethLatestPrice;\n  const ethActualCoinValue =\n    coinAmounts[coinAmounts.length - 1].ethusdActual * ethLatestPrice;\n\n  return (\n    <>\n      <Text mt=\"2\">Stats update in {Math.round(hoursUntilUpdate)} hours</Text>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        mb=\"4\"\n        mt=\"2\"\n        w={1}\n        justifyContent=\"space-between\"\n      >\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Dollars spent</Text>\n          <Text>Bitcoin: ${btcDollarsSpent}</Text>\n          <Text>Ethereum: ${ethDollarsSpent}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Coins purchased</Text>\n          <Text>Bitcoin: {btcCoinsPurchased}</Text>\n          <Text>Ethereum: {ethCoinsPurchased}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Dollar-Cost-Average strategy</Text>\n          <Text>Bitcoin: ${btcDcaComparisonPrice}</Text>\n          <Text>Ethereum: ${ethDcaComparisonPrice}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Limit Strategy</Text>\n          <Text>Bitcoin: ${btcLimitStrategyPrice}</Text>\n          <Text>Ethereum: ${ethLimitStrategyPrice}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>\n            Bitcoin: {savingsPercentages[savingsPercentages.length - 1].btcusd}%\n          </Text>\n          <Text>\n            Ethereum: {savingsPercentages[savingsPercentages.length - 1].ethusd}\n            %\n          </Text>\n        </Box>\n      </Flex>\n      <Flex flexDirection={[\"column\", \"row\"]} flexWrap=\"wrap\">\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: btcDcaComparisonPrice,\n                  limit: btcLimitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: ethDcaComparisonPrice,\n                  limit: ethLimitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey=\"btcusdComparison\"\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar dataKey=\"btcusdActual\" name=\"actual\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              width={400}\n              height={400}\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey=\"ethusdComparison\"\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar dataKey=\"ethusdActual\" name=\"actual\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: coin value, in dollars</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: btcDcaComparisonCoinValue,\n                  limit: btcActualCoinValue,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: coin value, in dollars</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: ethDcaComparisonCoinValue,\n                  limit: ethActualCoinValue,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Limit strategy advantage over time</Text>\n          <Text>(percentage dollars saved per coin)</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              data={savingsPercentages}\n              margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n            >\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n              <CartesianGrid stroke=\"#333\" />\n              <Line\n                type=\"monotone\"\n                dataKey=\"btcusd\"\n                stroke={COLORS.btc}\n                yAxisId={0}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"ethusd\"\n                stroke={COLORS.eth}\n                yAxisId={1}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n} from \"recharts\";\n\nconst TICKERS = [\"btcusd\", \"ethusd\"];\n\nexport const Trades = () => {\n  const [trades, setTrades] = useState();\n\n  useEffect(() => {\n    if (!trades) {\n      return Promise.all(\n        TICKERS.map((ticker) => {\n          return fetch(\n            `https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_trades_list?ticker=${ticker}`\n          )\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades.map((ticker) => {\n          tradesObj[ticker.ticker] = ticker.result;\n        });\n        setTrades(tradesObj);\n      });\n    }\n  }, [trades, setTrades]);\n\n  if (!trades) {\n    return null;\n  }\n\n  return (\n    <>\n      <Text as=\"h2\" mt=\"4\" ml=\"2\" textAlign=\"left\">\n        Buy History\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {TICKERS.map((ticker) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Box mt=\"2\" mb=\"2\">\n                  <Text as=\"h3\">Buy history: {ticker}</Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={trades[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              <table ml=\"4\">\n                <thead>\n                  <tr>\n                    <th>Date</th>\n                    <th>Price</th>\n                    <th>Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {trades[ticker] &&\n                    Object.values(trades[ticker]).map((trade) => (\n                      <tr key={trade.tid}>\n                        <td>{trade.datetime}</td>\n                        <td>${trade.price}</td>\n                        <td>{trade.amount}</td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine,\n} from \"recharts\";\n\nconst TICKERS = [\"btcusd\", \"ethusd\"];\n\nexport const OpenOrders = () => {\n  const [orders, setOrders] = useState();\n  const [prices, setPrices] = useState();\n\n  useEffect(() => {\n    if (!prices) {\n      return Promise.all(\n        TICKERS.map((ticker) => {\n          return fetch(\n            `https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_price?ticker=${ticker}`\n          )\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                return { ticker: ticker, result };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const prices = Object.values(result);\n        let pricesObj = {};\n        // eslint-disable-next-line array-callback-return\n        prices?.map((ticker) => {\n          pricesObj[ticker.ticker] = ticker.result;\n        });\n        setPrices(pricesObj);\n      });\n    }\n    if (!orders) {\n      return Promise.all(\n        TICKERS.map((ticker) => {\n          return fetch(\n            `https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_open_orders?ticker=${ticker}`\n          )\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades?.map((ticker) => {\n          tradesObj[ticker.ticker] = ticker.result;\n        });\n        setOrders(tradesObj);\n      });\n    }\n  }, [prices, setPrices, orders, setOrders]);\n\n  if (!orders) {\n    return null;\n  }\n\n  return (\n    <>\n      <Text as=\"h2\" mt=\"4\" ml=\"2\" textAlign=\"left\">\n        Open Orders\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {TICKERS.map((ticker) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {orders[ticker] && (\n                <Box mt=\"2\" mb=\"2\" width={1}>\n                  <Text as=\"h3\">Open orders: {ticker}</Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={orders[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      <ReferenceLine\n                        y={prices[ticker]}\n                        stroke=\"green\"\n                        alwaysShow={true}\n                        label={{ value: \"current price\", fill: \"white\" }}\n                        color=\"white\"\n                      />\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              <table ml=\"4\">\n                <thead>\n                  <tr>\n                    <th>Placed on</th>\n                    <th>Price</th>\n                    <th>Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {orders[ticker] &&\n                    Object.values(orders[ticker]).map((trade) => (\n                      <tr key={trade.tid}>\n                        <td>{trade.datetime}</td>\n                        <td>${trade.price}</td>\n                        <td>{trade.remaining_amount}</td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import './App.css';\nimport { Configuration } from \"./components/Configuration\";\nimport { Stats } from \"./components/Stats\";\nimport { Trades } from \"./components/Trades\";\nimport { OpenOrders } from \"./components/OpenOrders\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <ul style={{ listStyle: \"none\", textAlign: \"left\" }}>\n            <li>\n              <Link to=\"/orders\">Open Orders</Link>\n            </li>\n            <li>\n              <Link to=\"/stats\">Stats</Link>\n            </li>\n            <li>\n              <Link to=\"/trades\">Buy History</Link>\n            </li>\n            <li>\n              <Link to=\"/configuration\">Configuration</Link>\n            </li>\n          </ul>\n\n          <Routes>\n            <Route path=\"/\" exact element={<OpenOrders />} />\n            <Route path=\"/orders\" element={<OpenOrders />} />\n            <Route path=\"/stats\" element={<Stats />} />\n            <Route path=\"/trades\" element={<Trades />} />\n            <Route path=\"/configuration\" element={<Configuration />} />\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}