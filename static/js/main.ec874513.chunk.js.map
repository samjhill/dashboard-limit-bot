{"version":3,"sources":["components/Configuration.js","components/Stats.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","Stats","stats","setStats","log","groupedStats","groupBy","stat","moment","datetime","startOf","format","savingsPercentages","Object","values","map","statsForDay","name","savings","savings_percent","ticker","reduce","prev","cur","sort","stat1","stat2","coinAmounts","actualCoinAmount","actual_coin_amount","comparisonCoinAmount","comparison_coin_amount","dollarsSpent","totalSpend","total_spend","coinsPurchased","btcDollarsSpent","length","btcusdTotalSpend","ethDollarsSpent","ethusdTotalSpend","btcCoinsPurchased","btcusdCoinAmount","ethCoinsPurchased","ethusdCoinAmount","p","Math","round","btcusd","ethusd","flexDirection","width","mt","ResponsiveContainer","height","LineChart","data","margin","top","right","left","bottom","XAxis","dataKey","Tooltip","Legend","CartesianGrid","stroke","Line","type","yAxisId","BarChart","strokeDasharray","YAxis","Bar","fill","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAGaA,EAAgB,WAAO,IAAD,EACLC,qBADK,mBAC1BC,EAD0B,KAClBC,EADkB,KAoBjC,OAjBAC,qBAAU,WACHF,GACHG,MACE,4EAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCN,EAAUM,MAEZ,SAACC,GACCC,QAAQD,MAAMA,QAIrB,CAACR,EAAQC,IAEPD,EAKH,eAAC,IAAD,CAAKU,UAAU,OAAOC,GAAG,IAAzB,UACE,cAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,IAAjB,2BAIA,eAAC,IAAD,CAAKA,GAAG,IAAR,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,oBACA,eAAC,IAAD,oCAA6BZ,EAAOc,uBACpC,eAAC,IAAD,qCAA8Bd,EAAOe,wBACrC,eAAC,IAAD,sCAA+Bf,EAAOgB,4BAGxC,eAAC,IAAD,CAAKH,GAAG,IAAR,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,oBACA,eAAC,IAAD,gCAAyBZ,EAAOiB,cAChC,eAAC,IAAD,wCAAwD,IAAvBjB,EAAOkB,cAAxC,OACA,eAAC,IAAD,sDAC2ClB,EAAOmB,0BArB/C,M,gICPEC,EAAQ,WAAO,IAAD,EACCrB,qBADD,mBAClBsB,EADkB,KACXC,EADW,KAmBzB,GAhBApB,qBAAU,WACHmB,GACHlB,MAAM,oEACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCe,EAASf,GACTE,QAAQc,IAAIhB,MAEd,SAACC,GACCC,QAAQD,MAAMA,QAIrB,CAACa,EAAOC,KAEND,EACH,OAAO,KAGT,IAAMG,EAAeC,YAAQJ,GAAO,SAACK,GACnC,OAAOC,IAAOD,EAAKE,UAAUC,QAAQ,OAAOC,YAGxCC,EAAqBC,OAAOC,OAAOT,GACtCU,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACR,GAAD,MAAW,CACdU,KAAMT,IAAOD,EAAKE,UAAUE,OAAO,YACnCO,QAASX,EAAKY,gBACdC,OAAQb,EAAKa,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MACTM,EAAIH,OAASG,EAAIL,YAEpB,OAGLM,MAAK,SAACC,EAAOC,GAAR,OAAkBlB,IAAOiB,EAAMR,MAAQT,IAAOkB,EAAMT,SAGtDU,EAAcd,OAAOC,OAAOT,GAC/BU,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACR,GAAD,MAAW,CACdU,KAAMT,IAAOD,EAAKE,UAAUE,OAAO,YACnCiB,iBAAkBrB,EAAKsB,mBACvBC,qBAAsBvB,EAAKwB,uBAC3BX,OAAQb,EAAKa,WAEdC,QACC,SAACC,EAAMC,GAAP,yBAAC,eACID,GADL,OAEEL,KAAMM,EAAIN,MAFZ,wBAGMM,EAAIH,OAHV,UAG2BG,EAAIK,kBAH/B,wBAIML,EAAIH,OAJV,cAI+BG,EAAIO,sBAJnC,MAMA,OAGLN,MAAK,SAACC,EAAOC,GAAR,OAAkBlB,IAAOiB,EAAMR,MAAQT,IAAOkB,EAAMT,SAGpDe,EAAenB,OAAOC,OAAOT,GAChCU,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACR,GAAD,MAAW,CACdU,KAAMT,IAAOD,EAAKE,UAAUE,OAAO,YACnCsB,WAAY1B,EAAK2B,YACjBd,OAAQb,EAAKa,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MAFZ,UAGMM,EAAIH,OAHV,cAG+BG,EAAIU,eAEnC,OAGLT,MAAK,SAACC,EAAOC,GAAR,OAAkBlB,IAAOiB,EAAMR,MAAQT,IAAOkB,EAAMT,SAGtDkB,EAAiBtB,OAAOC,OAAOT,GAClCU,KAAI,SAACC,GAAD,OACHA,EACGD,KAAI,SAACR,GAAD,MAAW,CACdU,KAAMT,IAAOD,EAAKE,UAAUE,OAAO,YACnCiB,iBAAkBrB,EAAKsB,mBACvBT,OAAQb,EAAKa,WAEdC,QACC,SAACC,EAAMC,GAAP,mBAAC,eACID,GADL,gBAEEL,KAAMM,EAAIN,MAFZ,UAGMM,EAAIH,OAHV,cAG+BG,EAAIK,qBAEnC,OAGLJ,MAAK,SAACC,EAAOC,GAAR,OAAkBlB,IAAOiB,EAAMR,MAAQT,IAAOkB,EAAMT,SAGxDmB,EACJJ,EAAaA,EAAaK,OAAS,GAAGC,iBAClCC,EACJP,EAAaA,EAAaK,OAAS,GAAGG,iBAElCC,EACJN,EAAeA,EAAeE,OAAS,GAAGK,iBAEtCC,EACJR,EAAeA,EAAeE,OAAS,GAAGO,iBAE5C,OACE,qCACE,eAAC,IAAD,CAAKrD,UAAU,OAAOsD,EAAE,IAAxB,UACE,cAAC,IAAD,CAAMpD,GAAG,KAAT,2BACA,eAAC,IAAD,wBAAiB2C,KACjB,eAAC,IAAD,yBAAkBG,QAEpB,eAAC,IAAD,CAAKhD,UAAU,OAAOsD,EAAE,IAAxB,UACE,cAAC,IAAD,CAAMpD,GAAG,KAAT,6BACA,eAAC,IAAD,uBAAgBgD,KAChB,eAAC,IAAD,wBAAiBE,QAEnB,eAAC,IAAD,CAAKpD,UAAU,OAAOsD,EAAE,IAAxB,UACE,cAAC,IAAD,CAAMpD,GAAG,KAAT,oCACA,eAAC,IAAD,wBAAiBqD,KAAKC,MAAMX,EAAkBK,MAC9C,eAAC,IAAD,yBAAkBK,KAAKC,MAAMR,EAAkBI,SAEjD,eAAC,IAAD,CAAKpD,UAAU,OAAOsD,EAAE,IAAxB,UACE,cAAC,IAAD,CAAMpD,GAAG,KAAT,uCACA,eAAC,IAAD,uBACYmB,EAAmBA,EAAmByB,OAAS,GAAGW,OAD9D,OAGA,eAAC,IAAD,wBACapC,EAAmBA,EAAmByB,OAAS,GAAGY,OAD/D,UAIF,eAAC,IAAD,CAAMC,cAAe,CAAC,SAAU,OAAhC,UACE,eAAC,IAAD,CAAKC,MAAO,CAAC,EAAG,EAAI,GAAIC,GAAG,IAAI1D,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,uCACA,cAAC,IAAD,kDACA,cAAC4D,EAAA,EAAD,CAAqBF,MAAM,OAAOG,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEC,KAAM5C,EACN6C,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,GAAIC,OAAQ,GAFhD,UAIE,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CACEC,KAAK,WACLN,QAAQ,SACRI,OAAO,SACPG,QAAS,IAEX,cAACF,EAAA,EAAD,CACEC,KAAK,WACLN,QAAQ,SACRI,OAAO,UACPG,QAAS,YAMjB,eAAC,IAAD,CAAKnB,MAAO,CAAC,EAAG,EAAI,GAAIC,GAAG,IAAI1D,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,mDACA,cAAC4D,EAAA,EAAD,CAAqBF,MAAM,OAAOG,OAAQ,IAA1C,SACE,eAACiB,EAAA,EAAD,CACEf,KAAM7B,EACN8B,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GANZ,UASE,cAACK,EAAA,EAAD,CAAeM,gBAAgB,QAC/B,cAACV,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACU,EAAA,EAAD,IACA,cAACT,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACS,EAAA,EAAD,CAAKX,QAAQ,eAAe9C,KAAK,SAAS0D,KAAK,YAC/C,cAACD,EAAA,EAAD,CACEX,QAAQ,mBACR9C,KAAK,aACL0D,KAAK,oBAMb,eAAC,IAAD,CAAKxB,MAAO,CAAC,EAAG,EAAI,GAAIC,GAAG,IAAI1D,GAAG,IAAlC,UACE,cAAC,IAAD,CAAMD,GAAG,KAAT,oDACA,cAAC4D,EAAA,EAAD,CAAqBF,MAAM,OAAOG,OAAQ,IAA1C,SACE,eAACiB,EAAA,EAAD,CACEpB,MAAO,IACPG,OAAQ,IACRE,KAAM7B,EACN8B,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GARZ,UAWE,cAACK,EAAA,EAAD,CAAeM,gBAAgB,QAC/B,cAACV,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACU,EAAA,EAAD,IACA,cAACT,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACS,EAAA,EAAD,CAAKX,QAAQ,eAAe9C,KAAK,SAAS0D,KAAK,YAC/C,cAACD,EAAA,EAAD,CACEX,QAAQ,mBACR9C,KAAK,aACL0D,KAAK,2BCpONC,MAVf,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/F,MAAK,YAAkD,IAA/CgG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ec874513.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\"\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return null;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { groupBy } from \"underscore\";\n\nexport const Stats = () => {\n  const [stats, setStats] = useState();\n\n  useEffect(() => {\n    if (!stats) {\n      fetch(\"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n            console.log(result)\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats]);\n\n  if (!stats) {\n    return null;\n  }\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  const savingsPercentages = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          savings: stat.savings_percent,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [cur.ticker]: cur.savings,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n\n  const coinAmounts = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          comparisonCoinAmount: stat.comparison_coin_amount,\n          ticker: stat.ticker\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}Actual`]: cur.actualCoinAmount,\n            [`${cur.ticker}Comparison`]: cur.comparisonCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n\n    const dollarsSpent = Object.values(groupedStats)\n      .map((statsForDay) =>\n        statsForDay\n          .map((stat) => ({\n            name: moment(stat.datetime).format(\"MM/DD/YY\"),\n            totalSpend: stat.total_spend,\n            ticker: stat.ticker,\n          }))\n          .reduce(\n            (prev, cur) => ({\n              ...prev,\n              name: cur.name,\n              [`${cur.ticker}TotalSpend`]: cur.totalSpend,\n            }),\n            {}\n          )\n      )\n      .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n\n    const coinsPurchased = Object.values(groupedStats)\n      .map((statsForDay) =>\n        statsForDay\n          .map((stat) => ({\n            name: moment(stat.datetime).format(\"MM/DD/YY\"),\n            actualCoinAmount: stat.actual_coin_amount,\n            ticker: stat.ticker,\n          }))\n          .reduce(\n            (prev, cur) => ({\n              ...prev,\n              name: cur.name,\n              [`${cur.ticker}CoinAmount`]: cur.actualCoinAmount,\n            }),\n            {}\n          )\n      )\n      .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n    \n\n  const btcDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].btcusdTotalSpend;\n  const ethDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].ethusdTotalSpend;\n\n  const btcCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].btcusdCoinAmount;\n\n  const ethCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].ethusdCoinAmount;\n\n  return (\n    <>\n      <Box textAlign=\"left\" p=\"2\">\n        <Text as=\"h3\">Dollars spent</Text>\n        <Text>Bitcoin: ${btcDollarsSpent}</Text>\n        <Text>Ethereum: ${ethDollarsSpent}</Text>\n      </Box>\n      <Box textAlign=\"left\" p=\"2\">\n        <Text as=\"h3\">Coins purchased</Text>\n        <Text>Bitcoin: {btcCoinsPurchased}</Text>\n        <Text>Ethereum: {ethCoinsPurchased}</Text>\n      </Box>\n      <Box textAlign=\"left\" p=\"2\">\n        <Text as=\"h3\">Average price per coin</Text>\n        <Text>Bitcoin: ${Math.round(btcDollarsSpent / btcCoinsPurchased)}</Text>\n        <Text>Ethereum: ${Math.round(ethDollarsSpent / ethCoinsPurchased)}</Text>\n      </Box>\n      <Box textAlign=\"left\" p=\"2\">\n        <Text as=\"h3\">Advantage compared to DCA</Text>\n        <Text>\n          Bitcoin: {savingsPercentages[savingsPercentages.length - 1].btcusd}%\n        </Text>\n        <Text>\n          Ethereum: {savingsPercentages[savingsPercentages.length - 1].ethusd}%\n        </Text>\n      </Box>\n      <Flex flexDirection={[\"column\", \"row\"]}>\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>(percentage dollars saved per coin)</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              data={savingsPercentages}\n              margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n            >\n              <XAxis dataKey=\"name\" />\n              <Tooltip />\n              <Legend />\n              <CartesianGrid stroke=\"#f5f5f5\" />\n              <Line\n                type=\"monotone\"\n                dataKey=\"btcusd\"\n                stroke=\"orange\"\n                yAxisId={0}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"ethusd\"\n                stroke=\"#407aff\"\n                yAxisId={1}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"btcusdActual\" name=\"actual\" fill=\"#8884d8\" />\n              <Bar\n                dataKey=\"btcusdComparison\"\n                name=\"comparison\"\n                fill=\"#82ca9d\"\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              width={400}\n              height={400}\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"ethusdActual\" name=\"actual\" fill=\"#8884d8\" />\n              <Bar\n                dataKey=\"ethusdComparison\"\n                name=\"comparison\"\n                fill=\"#82ca9d\"\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import './App.css';\nimport { Configuration } from \"./components/Configuration\";\nimport { Stats } from \"./components/Stats\";\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Stats />\n      <Configuration />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}