{"version":3,"sources":["components/Configuration.js","helpers/tradingPairs.js","helpers/stats.js","helpers/colors.js","components/TradingPairSelector.js","components/Stats.js","helpers/prices.js","components/Table.js","components/Trades.js","components/OpenOrders.js","components/BuildLog.js","components/MailingList.js","components/Todos.js","components/About.js","components/Backtest.js","helpers/routes.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","API_URLS","getConfiguration","ENV","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","getTradingPairs","transformStatsToChartFormat","groupedStats","mapProps","reduceProps","map","statsForDay","stat","name","moment","datetime","format","ticker","Object","entries","key","value","reduce","prev","cur","sort","stat1","stat2","COLORS","btc","btcusd","eth","ethusd","comparison","ltcusd","ltc","TradingPairSelector","path","useLocation","pathname","split","selectedTicker","tradingPairs","setTradingPairs","a","fetchTradingPairs","to","linkPrefix","style","textDecoration","p","m","sx","color","border","background","fontWeight","StatComparisonBox","statItems","item","flexDirection","mr","title","statItem","Stats","stats","setStats","getStats","length","groupBy","startOf","statsForPairs","statsGroupedByDayFilteredByTicker","values","filter","coinAmounts","actualCoinAmount","comparisonCoinAmount","dollarsSpent","totalSpend","comparisonDollarsSpent","comparisonTotalSpend","marketPrice","currentPrice","coinsPurchased","dcaComparisonAveragePrice","averageDcaPrice","savingsPercentages","savings","Math","round","totalCoinsPurchased","limitStrategyPrice","dcaComparisonPrice","latestPrice","parseFloat","dcaComparisonCoinValue","actualCoinValue","lastUpdated","nextUpdate","add","hoursUntilUpdate","duration","diff","asHours","getStatsForTicker","findStatsForPair","find","includes","profit","comparisonProfit","mt","w","justifyContent","minWidth","toLocaleString","flexWrap","width","ResponsiveContainer","height","BarChart","data","dca","limit","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","LineChart","Line","type","getPrices","tickers","Promise","all","getPrice","prices","pricesObj","Table","headers","rows","ml","header","row","index","cell","padding","Trades","trades","setTrades","setPrices","fetchPrices","getTradesList","trade","timestampms","tradesObj","reverse","ScatterChart","ReferenceLine","y","alwaysShow","label","Scatter","price","amount","OrderChart","orders","remaining_amount","OpenOrders","setOrders","pair","getOpenOrders","LogEntry","text","date","backgroundColor","maxWidth","dangerouslySetInnerHTML","__html","BuildLog","entry","MailingList","pb","action","fields","placeholder","required","TodoItem","Todos","About","target","rel","href","cursor","onClick","window","open","Backtest","src","process","ROUTES","exact","display","element","localStorage","getItem","dev","prod","App","dashboardMode","setDashboardMode","dashboardInterval","dashboardTimer","setInterval","currentRouteIndex","findIndex","route","location","nextRoute","clearInterval","LinkContainer","isActive","children","transition","Links","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30cf38c9.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\nimport { API_URLS, ENV } from \"../App\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        API_URLS.getConfiguration[ENV]\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import { API_URLS, ENV } from \"../App\";\n\nexport const getTradingPairs = () => {\n  return fetch(`${API_URLS.getTradingPairs[ENV]}`)\n    .then((res) => res.json())\n    .then(\n      (result) => {\n        return result;\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n};\n","import moment from \"moment\";\n\nconst transformStatsToChartFormat = (groupedStats, mapProps, reduceProps) => {\n  const chartFormatStats = groupedStats\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => {\n          return {\n            name: moment(stat.datetime).format(\"MM/DD/YY\"),\n            ticker: stat.ticker,\n            ...Object.entries(mapProps)\n              .map(([key, value]) => ({\n                [key]: stat[value],\n              }))\n              .reduce((prev, cur) => ({ ...prev, ...cur })),\n          };\n        })\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            ...Object.entries(reduceProps)\n              .map(([key, value]) => ({\n                [key]: cur[value],\n              }))\n              .reduce((prev, cur) => ({ ...prev, ...cur })),\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  return chartFormatStats;\n};\n\nexport const getStatsForTicker = ({ groupedStats, ticker }) => {\n  if (!ticker || !groupedStats) {\n    return null;\n  }\n\n  const statsGroupedByDayFilteredByTicker = Object.values(groupedStats)\n    .map((statsForDay) => statsForDay.filter((stat) => stat.ticker === ticker))\n    .filter((statsForDay) => statsForDay.length > 0);\n\n  const coinAmounts = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      actualCoinAmount: \"actual_coin_amount\",\n      comparisonCoinAmount: \"comparison_coin_amount\",\n    },\n    {\n      [`${ticker}Actual`]: \"actualCoinAmount\",\n      [`${ticker}Comparison`]: \"comparisonCoinAmount\",\n    }\n  );\n\n  const dollarsSpent = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      totalSpend: \"total_spend\",\n    },\n    {\n      [`${ticker}TotalSpend`]: \"totalSpend\",\n    }\n  );\n\n  const comparisonDollarsSpent = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      comparisonTotalSpend: \"comparison_total_spend\",\n    },\n    {\n      [`${ticker}ComparisonTotalSpend`]: \"comparisonTotalSpend\",\n    }\n  );\n\n  const marketPrice = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      currentPrice: \"current_price\",\n    },\n    {\n      [`${ticker}CurrentPrice`]: \"currentPrice\",\n    }\n  );\n\n  const coinsPurchased = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      actualCoinAmount: \"actual_coin_amount\",\n    },\n    {\n      [`${ticker}CoinAmount`]: \"actualCoinAmount\",\n    }\n  );\n\n  const dcaComparisonAveragePrice = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      averageDcaPrice: \"average_dca_price\",\n    },\n    {\n      [`${ticker}AverageDcaPrice`]: \"averageDcaPrice\",\n    }\n  );\n\n  const savingsPercentages = transformStatsToChartFormat(\n    statsGroupedByDayFilteredByTicker,\n    {\n      savings: \"savings_percent\",\n    },\n    {\n      [ticker]: \"savings\",\n    }\n  );\n\n  const totalSpend =\n    Math.round(dollarsSpent[dollarsSpent.length - 1][`${ticker}TotalSpend`]);\n  const comparisonTotalSpend = Math.round(\n    comparisonDollarsSpent[comparisonDollarsSpent.length - 1][`${ticker}ComparisonTotalSpend`]\n  );\n\n  const totalCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1][`${ticker}CoinAmount`];\n\n  const limitStrategyPrice = Math.round(totalSpend / totalCoinsPurchased);\n  const dcaComparisonPrice =\n    Math.round(dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1][\n      `${ticker}AverageDcaPrice`\n    ]);\n\n  const latestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1][`${ticker}CurrentPrice`]\n  );\n  const dcaComparisonCoinValue =\n    Math.round(coinAmounts[coinAmounts.length - 1][`${ticker}Comparison`] * latestPrice);\n  const actualCoinValue =\n    Math.round(coinAmounts[coinAmounts.length - 1][`${ticker}Actual`] * latestPrice);\n\n  const lastUpdated = moment(\n    statsGroupedByDayFilteredByTicker[\n      statsGroupedByDayFilteredByTicker.length - 1\n    ].datetime\n  );\n  const nextUpdate = moment(lastUpdated).add(24, \"hours\");\n\n  const hoursUntilUpdate = moment.duration(nextUpdate.diff(moment())).asHours();\n\n  return {\n    coinAmounts,\n    dollarsSpent,\n    marketPrice,\n    coinsPurchased,\n    dcaComparisonAveragePrice,\n    totalSpend,\n    comparisonTotalSpend,\n    totalCoinsPurchased,\n    limitStrategyPrice,\n    dcaComparisonPrice,\n    latestPrice,\n    dcaComparisonCoinValue,\n    actualCoinValue,\n    ticker,\n    savingsPercentages,\n    hoursUntilUpdate,\n  };\n};\n","export const COLORS = {\n  btc: \"orange\",\n  btcusd: \"orange\",\n  eth: \"#407aff\",\n  ethusd: \"#407aff\",\n  comparison: \"grey\",\n  ltcusd: \"lime\",\n  ltc: \"lime\"\n};\n","import { useEffect, useState } from \"react\";\nimport { Box } from \"rebass\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { linkPrefix } from \"../helpers/routes\";\nimport { COLORS } from \"../helpers/colors\";\n\n// path: str, where to redirect on ticker selection\n//    trying to keep everything url-driven\nexport const TradingPairSelector = ({ path }) => {\n  const location = useLocation();\n  const ticker =\n    process.env.NODE_ENV === \"development\"\n      ? location.pathname.split(\"/\")[2]\n      : location.pathname.split(\"/\")[3];\n  const selectedTicker = ticker === \"*\" ? \"btcusd\" : ticker;\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n  }, [tradingPairs, setTradingPairs]);\n\n  return (\n    <>\n      {tradingPairs?.map(({ name, ticker }) => (\n        <Link\n          to={`${linkPrefix}/${path}/${ticker}`}\n          style={{ textDecoration: \"none\" }}\n          key={ticker}\n        >\n          <Box\n            p={2}\n            m={1}\n            sx={{\n              color: selectedTicker === ticker ? \"white\" : COLORS[ticker],\n              border: `1px solid ${COLORS[ticker]}`,\n              background: selectedTicker === ticker && COLORS[ticker],\n              fontWeight: \"bold\",\n            }}\n          >\n            {name}\n          </Box>\n        </Link>\n      ))}\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { useLocation } from \"react-router-dom\";\nimport { groupBy } from \"underscore\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { getStatsForTicker } from \"../helpers/stats\";\nimport { COLORS } from \"../helpers/colors\";\nimport { TradingPairSelector } from \"../components/TradingPairSelector\";\n\n// statItems: { title, statItem }[]\nconst StatComparisonBox = ({ statItems }) => {\n  if (!statItems) {\n    return;\n  }\n  return (\n    <Flex>\n      {statItems.map((item) => (\n        <Flex flexDirection=\"column\" mr=\"4\">\n          <Text color={item.color || \"text\"}>{item.title}</Text>\n          <Text key={item.title}>{item.statItem}</Text>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n\nexport const Stats = () => {\n  const location = useLocation();\n  const ticker =\n    process.env.NODE_ENV === \"development\"\n      ? location.pathname.split(\"/\")[2]\n      : location.pathname.split(\"/\")[3];\n  const selectedTicker = ticker === \"*\" ? \"btcusd\" : ticker;\n  const [stats, setStats] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n\n    if (!stats) {\n      fetch(API_URLS.getStats[ENV])\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats, tradingPairs, setTradingPairs]);\n\n  if (!stats) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  if (stats.length === 0) {\n    return <Text as=\"h1\">No data yet.</Text>;\n  }\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  if (!tradingPairs) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  const statsForPairs = tradingPairs.map(({ name, ticker }) => {\n    return getStatsForTicker({ groupedStats, ticker });\n  });\n\n  if (!statsForPairs) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  const findStatsForPair = (ticker) =>\n    statsForPairs.find((stats) => [stats.ticker].includes(ticker));\n\n  const profit =\n    findStatsForPair(selectedTicker).actualCoinValue -\n    findStatsForPair(selectedTicker).totalSpend;\n\n  const comparisonProfit =\n    findStatsForPair(selectedTicker).dcaComparisonCoinValue -\n    findStatsForPair(selectedTicker).comparisonTotalSpend;\n\n  if (statsForPairs.length !== tradingPairs.length) {\n    return <Text as=\"h1\">Loading stats</Text>;\n  }\n\n  return (\n    <>\n      <Flex>\n        <TradingPairSelector path=\"stats\" />\n      </Flex>\n      <Text mt=\"2\">Stats update every 24 hours</Text>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        mb=\"4\"\n        mt=\"2\"\n        w={1}\n        justifyContent=\"space-between\"\n      >\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Dollars spent</Text>\n          <StatComparisonBox\n            statItems={[\n              {\n                title: \"comparison\",\n                statItem: `$\n                  ${findStatsForPair(\n                    selectedTicker\n                  ).comparisonTotalSpend.toLocaleString()}`,\n              },\n              {\n                title: \"actual\",\n                color: COLORS[selectedTicker],\n                statItem: `$\n                  ${findStatsForPair(\n                    selectedTicker\n                  ).totalSpend.toLocaleString()}`,\n              },\n            ]}\n          />\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Current value (USD)</Text>\n          <StatComparisonBox\n            statItems={[\n              {\n                title: \"comparison\",\n                statItem: `$\n                  ${findStatsForPair(\n                    selectedTicker\n                  ).dcaComparisonCoinValue.toLocaleString()}`,\n              },\n              {\n                title: \"actual\",\n                color: COLORS[selectedTicker],\n                statItem: `$\n                  ${findStatsForPair(\n                    selectedTicker\n                  ).actualCoinValue.toLocaleString()}`,\n              },\n            ]}\n          />\n        </Box>\n\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Profit (USD)</Text>\n          <StatComparisonBox\n            statItems={[\n              {\n                title: \"comparison\",\n                statItem: `$\n                  ${comparisonProfit.toLocaleString()}`,\n              },\n              {\n                title: \"actual\",\n                color: COLORS[selectedTicker],\n                statItem: `$\n                  ${profit.toLocaleString()}`,\n              },\n            ]}\n          />\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Coins purchased</Text>\n          {findStatsForPair(selectedTicker) && (\n            <Text key={selectedTicker}>\n              {findStatsForPair(selectedTicker).totalCoinsPurchased}\n            </Text>\n          )}\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin</Text>\n          <StatComparisonBox\n            statItems={[\n              {\n                title: \"comparison\",\n                statItem: `$\n                  ${findStatsForPair(\n                    selectedTicker\n                  ).dcaComparisonPrice.toLocaleString()}`,\n              },\n              {\n                title: \"actual\",\n                color: COLORS[selectedTicker],\n                statItem: `$\n                  ${findStatsForPair(\n                    selectedTicker\n                  ).limitStrategyPrice.toLocaleString()}`,\n              },\n            ]}\n          />\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>percentage dollars saved per coin</Text>\n          <Text>\n            {\n              findStatsForPair(selectedTicker)?.savingsPercentages[\n                findStatsForPair(selectedTicker)?.savingsPercentages.length - 1\n              ][selectedTicker]\n            }\n            %\n          </Text>\n        </Box>\n      </Flex>\n      <Flex flexDirection={[\"column\", \"row\"]} flexWrap=\"wrap\">\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: findStatsForPair(selectedTicker)?.dcaComparisonPrice,\n                  limit: findStatsForPair(selectedTicker)?.limitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar\n                dataKey=\"limit\"\n                name=\"limit strategy\"\n                fill={COLORS[selectedTicker]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={findStatsForPair(selectedTicker)?.coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey={`${selectedTicker}Comparison`}\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar\n                dataKey={`${selectedTicker}Actual`}\n                name=\"actual\"\n                fill={COLORS[selectedTicker]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">coin value, in dollars</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: findStatsForPair(selectedTicker)?.dcaComparisonCoinValue,\n                  limit: findStatsForPair(selectedTicker)?.actualCoinValue,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar\n                dataKey=\"limit\"\n                name=\"limit strategy\"\n                fill={COLORS[selectedTicker]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Limit strategy advantage over time</Text>\n          <Text>(percentage dollars saved per coin)</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              data={findStatsForPair(selectedTicker)?.savingsPercentages}\n              margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n            >\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n              <CartesianGrid stroke=\"#333\" />\n              {/* {tradingPairs.map(({ ticker }, index) => ( */}\n              <Line\n                type=\"monotone\"\n                dataKey={ticker}\n                stroke={COLORS[ticker]}\n                // yAxisId={index}\n                key={ticker}\n              />\n              {/* ))} */}\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import { API_URLS, ENV } from \"../App\";\n\nexport const getPrices = (tickers = [\"btcusd\", \"ethusd\"]) => {\n  return Promise.all(\n    tickers.map((ticker) => {\n      return fetch(`${API_URLS.getPrice[ENV]}?ticker=${ticker}`)\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            return { ticker: ticker, result };\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    })\n  ).then((result) => {\n    const prices = Object.values(result);\n    let pricesObj = {};\n    // eslint-disable-next-line array-callback-return\n    prices?.map((ticker) => {\n      if (!prices[ticker.ticker]){\n        prices[ticker.ticker] = 0;\n      }\n      pricesObj[ticker.ticker] = ticker.result;\n    });\n    return pricesObj;\n  });\n};\n","export const Table = ({ headers, rows }) => {\n    return (\n      <table ml=\"4\">\n        <thead>\n          <tr>\n            {headers.map((header) => (\n              <th key={header}>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row, index) => (\n            <tr key={index}>\n              {row.map((cell) => (\n                <td\n                  key={cell}\n                  style={{\n                    padding: \".25rem\",\n                  }}\n                >\n                  {cell}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n}","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getPrices } from \"../helpers/prices\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { COLORS } from \"../helpers/colors\";\nimport { Table } from \"../components/Table\";\n\n\nexport const Trades = () => {\n  const [trades, setTrades] = useState();\n  const [prices, setPrices] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchPrices() {\n      const prices = await getPrices();\n      setPrices(prices);\n    }\n\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n\n    if (!prices) {\n      fetchPrices();\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n\n    if (!trades && tradingPairs) {\n      return Promise.all(\n        tradingPairs.map(({ name, ticker }) => {\n          return fetch(`${API_URLS.getTradesList[ENV]}?ticker=${ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades.map((ticker) => {\n          tradesObj[ticker.ticker] = ticker.result.reverse();\n        });\n        setTrades(tradesObj);\n      });\n    }\n  }, [trades, setTrades, prices, setPrices, tradingPairs, setTradingPairs]);\n\n  if (!trades) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h2\" mt=\"4\" ml=\"2\" textAlign=\"left\">\n        Buy History\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {tradingPairs.map(({ name, ticker }) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Box mt=\"2\" mb=\"2\">\n                  <Text as=\"h3\" color={COLORS[ticker]}>\n                    {name}\n                  </Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={trades[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      {prices && prices[ticker] && (\n                        <ReferenceLine\n                          y={prices[ticker]}\n                          stroke={COLORS[ticker]}\n                          alwaysShow={true}\n                          label={{\n                            value: `current price - $${prices[\n                              ticker\n                            ].toLocaleString()}`,\n                            fill: \"white\",\n                          }}\n                          color=\"white\"\n                        />\n                      )}\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Table\n                  headers={[\"Date\", \"Price\", \"Amount\"]}\n                  rows={Object.values(trades[ticker])\n                    .reverse()\n                    .map((trade) => [\n                      trade.datetime,\n                      `$${parseFloat(trade.price).toLocaleString()}`,\n                      trade.amount,\n                    ])}\n                />\n              )}\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine,\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\nimport { getPrices } from \"../helpers/prices\";\nimport { getTradingPairs } from \"../helpers/tradingPairs\";\nimport { COLORS } from \"../helpers/colors\";\nimport { Table } from \"../components/Table\";\n\nexport const OrderChart = ({ ticker, name, data, orders, currentPrice }) => {\n  return (\n    <Flex key={ticker} width={[1, 1 / 2]} flexDirection={[\"column\", \"row\"]}>\n      <Box width={[1, 1 / 2]}>\n        {data && (\n          <Box mt=\"2\" mb=\"2\" width={1}>\n            <Text as=\"h3\" mb=\"2\" color={COLORS[ticker]}>\n              {name}\n            </Text>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <ScatterChart\n                data={data}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid stroke=\"#333\" />\n                <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                <YAxis stroke=\"#ebebeb\" />\n                <Tooltip />\n                <Legend />\n                {currentPrice && (\n                  <ReferenceLine\n                    y={currentPrice}\n                    stroke={COLORS[ticker]}\n                    alwaysShow={true}\n                    label={{\n                      value: `current price - $${currentPrice.toLocaleString()}`,\n                      fill: \"white\",\n                    }}\n                    color=\"white\"\n                  />\n                )}\n                <Scatter dataKey=\"price\" fill=\"white\" />\n              </ScatterChart>\n            </ResponsiveContainer>\n          </Box>\n        )}\n      </Box>\n\n      <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n        {orders && (\n          <Table\n            headers={[\"Placed on\", \"Price\", \"Amount\"]}\n            rows={orders.map((trade) => [\n              trade.datetime,\n              `$${parseFloat(trade.price).toLocaleString()}`,\n              trade.remaining_amount,\n            ])}\n          />\n        )}\n      </Box>\n    </Flex>\n  );\n};\nexport const OpenOrders = () => {\n  const [orders, setOrders] = useState();\n  const [prices, setPrices] = useState();\n  const [tradingPairs, setTradingPairs] = useState();\n\n  useEffect(() => {\n    async function fetchPrices() {\n      const prices = await getPrices();\n      setPrices(prices);\n    }\n\n    async function fetchTradingPairs() {\n      const tradingPairs = await getTradingPairs();\n      setTradingPairs(tradingPairs);\n    }\n\n    if (!prices) {\n      fetchPrices();\n    }\n    if (!tradingPairs) {\n      fetchTradingPairs();\n    }\n    if (!orders && tradingPairs) {\n      return Promise.all(\n        tradingPairs.map((pair) => {\n          return fetch(`${API_URLS.getOpenOrders[ENV]}?ticker=${pair.ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: pair.ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades?.map((ticker) => {\n          tradesObj[ticker?.ticker] = ticker?.result;\n        });\n        setOrders(tradesObj);\n      });\n    }\n  }, [prices, setPrices, orders, setOrders, tradingPairs, setTradingPairs]);\n\n  if (!orders) {\n    return <Text as=\"h1\">Loading orders...</Text>;\n  }\n\n  if (!tradingPairs) {\n    return <Text as=\"h1\">Loading trading pairs...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h1\" mt=\"4\" ml=\"2\" mb=\"2\" textAlign=\"left\">\n        Open Orders\n      </Text>\n\n      <Text textAlign=\"left\" ml=\"2\" mb=\"4\">\n        If the asset's{\" \"}\n        <span style={{ color: \"green\", fontWeight: \"bold\" }}>\n          price\n        </span>{\" \"}\n        drops down to any of the{\" \"}\n        <strong>white dots (open limit-buy orders)</strong>, the buy order gets\n        automatically triggered. Then, I create new orders based on the new\n        price.\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {tradingPairs.map((pair) => (\n          <OrderChart\n            key={pair.ticker}\n            ticker={pair.ticker}\n            name={pair.name}\n            data={orders[pair.ticker]}\n            orders={orders[pair.ticker]}\n            currentPrice={prices[pair.ticker]}\n          />\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import { Box, Text } from \"rebass\";\n\nconst LogEntry = ({ title, text, date }) => {\n    return (\n      <Box mt=\"2\" mb=\"4\" p=\"3\" backgroundColor=\"#0000001f\" maxWidth=\"800px\">\n        <Text as=\"h1\">{title}</Text>\n        <Text as=\"h4\">{date}</Text>\n        <Box mt=\"3\">\n          <div\n            dangerouslySetInnerHTML={{\n              __html: text,\n            }}\n          />\n        </Box>\n      </Box>\n    );\n};\n\nexport const BuildLog = () => {\n    const LogEntries = [\n      {\n        title: \"Added backtesting\",\n        text: \"I integrated with <a target='_blank' href='https://github.com/samjhill/backtesting.py'>a backtesting library!</a> So far, it's helped me nail down how long to let orders stay open before refreshing them.\",\n        date: \"Sun Feb 6, 2022\",\n      },\n      {\n        title: \"It's alive!\",\n        text: \"This robot has been running for about a month. It's my first try at automating `buy the dip` consistently over time, and automated trading in general. It's doing pretty well right now - it has a 5% USD price advantage compared to the baseline. It's mostly just a learning project for me, but if the advantage maintains or even grows, that would be just swell.\",\n        date: \"Fri Jan 21, 2022\",\n      },\n    ];\n    return (\n      <Box textAlign=\"left\" ml=\"2\" mt=\"4\">\n        <Text as=\"h2\" mb=\"2\">Build Log</Text>\n\n        {LogEntries.map(entry => (\n            <LogEntry {...entry} />\n        ))}\n      </Box>\n    );\n};","import React, { useState } from \"react\";\nimport Mailchimp from \"react-mailchimp-form\";\nimport { Box, Text } from \"rebass\";\n\nexport const MailingList = () => {\n  return (\n    <Box pb=\"2\">\n      <Text mt=\"2\">Feel free to sign up for more information.</Text>\n      <Text mb=\"2\">I promise I won't spam you!</Text>\n      <Mailchimp\n        action=\"https://flamingochurch.us5.list-manage.com/subscribe/post?u=6ebe0b4af973c20b095e1eb03&amp;id=f896297f9e\"\n        fields={[\n          {\n            name: \"EMAIL\",\n            placeholder: \"Email\",\n            type: \"email\",\n            required: true,\n          },\n        ]}\n      />\n    </Box>\n  );\n};\n","import { Box, Text } from \"rebass\";\n\nconst TodoItem = ({ title, text }) => {\n  return (\n    <Box mt=\"2\" mb=\"2\" p=\"3\" backgroundColor=\"#0000001f\" maxWidth=\"800px\">\n      <Text>{title}</Text>\n    </Box>\n  );\n};\n\nexport const Todos = () => {\n  const TodoItems = [\n    {\n      title: \"Add integration with traditional stock broker\",\n    },\n    {\n      title:\n        \"Add per-item settings for finer-grain control and customization of limit orders\",\n    },\n    {\n      title: \"Update gemini client to https://github.com/mtusman/gemini-python\",\n    },\n  ];\n  return (\n    <Box textAlign=\"left\" ml=\"2\" mt=\"4\">\n      <Text as=\"h2\" mb=\"2\">\n        Todos\n      </Text>\n\n      {TodoItems.map((entry) => (\n        <TodoItem {...entry} />\n      ))}\n    </Box>\n  );\n};\n","import { Text, Box, Button, Flex } from \"rebass\";\nimport { COLORS } from \"../helpers/colors\";\nimport { BuildLog } from \"./BuildLog\";\nimport { MailingList } from \"./MailingList\";\nimport { Todos } from \"./Todos\";\n\nexport const About = () => {\n\n  return (\n    <Box ml=\"2\">\n      <Box backgroundColor=\"#0000001f\" maxWidth=\"800px\" p=\"2\">\n        <Text as=\"h1\" textAlign=\"left\" ml=\"2\" mb=\"4\" mt=\"4\">\n          <Text color={COLORS.btc} as=\"span\">\n            Buy the Dip{\" \"}\n          </Text>{\" \"}\n          Bot\n        </Text>\n        <Text textAlign=\"left\" ml=\"2\" mb=\"2\">\n          Hi, I'm the dashboard for an asset-buying robot.\n        </Text>\n\n        <Text as=\"h4\" textAlign=\"left\" ml=\"2\" mb=\"2\">\n          The goal is to get the best price for a given asset by using a limit\n          strategy:\n          <ul>\n            <li>\n              place{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://en.wikipedia.org/wiki/Order_(exchange)#Limit_order\"\n              >\n                limit orders\n              </a>{\" \"}\n              at several intervals below the current price\n            </li>\n            <li>if an order gets executed or cancelled, start again</li>\n          </ul>\n        </Text>\n\n        <Flex>\n          <Text textAlign=\"left\" ml=\"2\" mb=\"5\" mt=\"2\">\n            Created by{\" \"}\n            <a href=\"https://github.com/samjhill\" target=\"_blank\">\n              Sam Hill\n            </a>\n          </Text>\n\n          <Button\n            sx={{\n              cursor: \"pointer\"\n            }}\n            ml=\"4\"\n            backgroundColor=\"orange\"\n            fontWeight=\"bold\"\n            height=\"2.5rem\"\n            onClick={window.open(\n              \"mailto:samuhill+limitBot@gmail.com?subject=Buy%20the%20Dip%20Bot\"\n            )}\n          >\n            Contact me\n          </Button>\n        </Flex>\n      </Box>\n\n      <Box backgroundColor=\"#0000001f\" maxWidth=\"800px\" p=\"2\" mt=\"2\">\n        <MailingList />\n      </Box>\n\n      <Todos />\n\n      <BuildLog />\n    </Box>\n  );\n};\n","import React from \"react\";\n\nexport const Backtest = () => {\n  return <iframe src={process.env.PUBLIC_URL + \"/bt.html\"} title=\"backtest\" width=\"100%\" height=\"1000px\" />;\n};","import { Configuration } from \"../components/Configuration\";\nimport { Stats } from \"../components/Stats\";\nimport { Trades } from \"../components/Trades\";\nimport { OpenOrders } from \"../components/OpenOrders\";\nimport { About } from \"../components/About\";\nimport { Backtest } from \"../components/Backtest\";\n\nexport const linkPrefix =\n  process.env.NODE_ENV === \"development\" ? \"\" : \"/dashboard-limit-bot\";\n\nexport const ROUTES = [\n  {\n    path: `${linkPrefix}/`,\n    exact: true,\n    display: \"About\",\n    element: <About />\n  },\n  {\n    path: `${linkPrefix}/orders`,\n    display: \"Open Orders\",\n    element: <OpenOrders />,\n  },\n  {\n    path: `${linkPrefix}/stats/*`,\n    display: \"Stats\",\n    element: <Stats />,\n  },\n  {\n    path: `${linkPrefix}/trades`,\n    display: \"Buy History\",\n    element: <Trades />,\n  },\n  {\n    path:`${linkPrefix}/backtest`,\n    display: \"Backtest\",\n    element: <Backtest />\n  },\n  {\n    path: `${linkPrefix}/configuration`,\n    display: \"Configuration\",\n    element: <Configuration />,\n  },\n];\n","import \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useLocation,\n} from \"react-router-dom\";\nimport { Box, Flex } from \"rebass\";\nimport React, { useState, useEffect } from \"react\";\nimport { ROUTES } from \"./helpers/routes\";\nimport { COLORS } from \"./helpers/colors\";\n\nexport const ENV = localStorage.getItem(\"env\") || \"dev\";\n\nexport const API_URLS = {\n  getPrice: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_price\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_price\",\n  },\n  getOpenOrders: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_open_orders\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_open_orders\",\n  },\n  getTradesList: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_trades_list\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/get_trades_list\",\n  },\n  getConfiguration: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/configuration\",\n  },\n  getStats: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/stats\",\n  },\n  getTradingPairs: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/trading_pairs\",\n    prod: \"https://jt5ivn6f34.execute-api.us-east-1.amazonaws.com/prod/trading_pairs\",\n  },\n};\n\nfunction App() {\n  const [dashboardMode, setDashboardMode] = useState(\n    localStorage.getItem(\"dashboardModeIsEnabled\") === \"true\"\n  );\n  const [dashboardInterval, setDashboardInterval] = useState(15000);\n\n  useEffect(() => {\n    let dashboardTimer;\n    if (dashboardMode) {\n      dashboardTimer = setInterval(() => {\n        const currentRouteIndex = ROUTES.findIndex((route) =>\n          window.location.pathname.includes(route.path)\n        );\n        const nextRoute = ROUTES[(currentRouteIndex + 1) % ROUTES.length];\n        window.location.href = nextRoute.path;\n      }, dashboardInterval);\n    } else {\n      clearInterval(dashboardTimer);\n    }\n  }, [dashboardMode, setDashboardMode, dashboardInterval]);\n\n  const LinkContainer = ({ isActive = false, children }) => (\n    <Box\n      mb=\"4\"\n      mr=\"2\"\n      w=\"100%\"\n      sx={{\n        a: {\n          width: \"100%\",\n          background: isActive ? \"white\" : \"none\",\n          color: isActive ? \"#333\" : \"white\",\n          border: \"1px solid white\",\n          padding: \".5rem\",\n          textDecoration: \"none\",\n          \"&:hover\": {\n            background: COLORS.btc,\n            transition: \"all .2s\",\n            color: \"black\",\n            border: `1px solid ${COLORS.btc}`,\n          },\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n\n  const EnvSelector = () => {\n    const [env, setEnv] = useState(localStorage.getItem(\"env\") || \"dev\");\n\n    return (\n      <select\n        value={env}\n        onChange={(e) => {\n          setEnv(e.target.value);\n          localStorage.setItem(\"env\", e.target.value);\n          window.location.reload();\n        }}\n        style={{\n          marginBottom: \"1rem\",\n          marginTop: \".5rem\",\n          padding: \".5rem\",\n        }}\n      >\n        <option value=\"dev\">dev</option>\n        <option value=\"prod\">prod</option>\n      </select>\n    );\n  };\n\n  const Links = () => {\n    const location = useLocation();\n\n    return (\n      <Flex flexWrap=\"wrap\" mt=\"3\" ml=\"2\" flexDirection={[\"row\"]}>\n        {ROUTES.map((route) => (\n          <LinkContainer\n            isActive={location.pathname === route.path}\n            key={route.path}\n          >\n            <Link to={route.path}>{route.display}</Link>\n          </LinkContainer>\n        ))}\n      </Flex>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Flex p=\"2\">\n            {/* <EnvSelector /> */}\n            {/* <Box ml=\"3\">\n              <label>\n                <input\n                  checked={dashboardMode}\n                  type=\"checkbox\"\n                  onChange={() => {\n                    localStorage.setItem(\n                      \"dashboardModeIsEnabled\",\n                      !dashboardMode\n                    );\n                    setDashboardMode(!dashboardMode);\n                  }}\n                />\n                Dashboard Mode\n              </label>\n              <Text>\n                Flips through the pages every {dashboardInterval / 1000} seconds\n              </Text>\n            </Box> */}\n          </Flex>\n          <Links />\n          <Routes>\n            {ROUTES.map((route) => (\n              <Route\n                path={route.path}\n                exact={route.exact}\n                element={route.element}\n                key={route.path}\n              />\n            ))}\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}