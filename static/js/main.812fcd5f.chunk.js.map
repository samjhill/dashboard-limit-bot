{"version":3,"sources":["components/Configuration.js","components/Stats.js","components/Trades.js","components/OpenOrders.js","App.js","reportWebVitals.js","index.js"],"names":["Configuration","useState","config","setConfig","useEffect","fetch","API_URLS","getConfiguration","ENV","then","res","json","result","error","console","textAlign","pl","as","mb","maximum_daily_spend","maximum_weekly_spend","maximum_monthly_spend","num_orders","interval_size","daily_dca_amount","COLORS","Stats","stats","setStats","getStats","length","statsSortedByDay","sort","a","b","moment","datetime","nextUpdate","add","hoursUntilUpdate","duration","diff","asHours","groupedStats","groupBy","stat","startOf","format","savingsPercentages","Object","values","map","statsForDay","name","savings","savings_percent","ticker","reduce","prev","cur","stat1","stat2","coinAmounts","actualCoinAmount","actual_coin_amount","comparisonCoinAmount","comparison_coin_amount","dollarsSpent","totalSpend","total_spend","marketPrice","currentPrice","current_price","coinsPurchased","dcaComparisonAveragePrice","averageDcaPrice","average_dca_price","btcDollarsSpent","btcusdTotalSpend","ethDollarsSpent","ethusdTotalSpend","btcCoinsPurchased","btcusdCoinAmount","ethCoinsPurchased","ethusdCoinAmount","btcLimitStrategyPrice","Math","round","btcDcaComparisonPrice","btcusdAverageDcaPrice","ethLimitStrategyPrice","ethDcaComparisonPrice","ethusdAverageDcaPrice","btcLatestPrice","parseFloat","btcusdCurrentPrice","ethLatestPrice","ethusdCurrentPrice","btcDcaComparisonCoinValue","btcusdComparison","btcActualCoinValue","btcusdActual","ethDcaComparisonCoinValue","ethusdComparison","ethActualCoinValue","ethusdActual","mt","flexDirection","w","justifyContent","p","minWidth","btcusd","ethusd","flexWrap","width","ResponsiveContainer","height","BarChart","data","dca","limit","margin","top","right","left","bottom","CartesianGrid","stroke","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","LineChart","Line","type","yAxisId","TICKERS","Trades","trades","setTrades","Promise","all","getTradesList","trade","timestampms","tradesObj","reverse","ml","ScatterChart","Scatter","price","amount","tid","OpenOrders","orders","setOrders","prices","setPrices","getPrice","getOpenOrders","pricesObj","style","color","fontWeight","ReferenceLine","y","alwaysShow","label","value","remaining_amount","dev","App","linkPrefix","LinkContainer","isActive","children","mr","sx","background","border","padding","textDecoration","Links","location","useLocation","links","path","display","link","pathname","includes","to","className","exact","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.812fcd5f.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Box, Text } from \"rebass\";\nimport { API_URLS, ENV } from \"../App\";\n\nexport const Configuration = () => {\n  const [config, setConfig] = useState();\n\n  useEffect(() => {\n    if (!config) {\n      fetch(\n        API_URLS.getConfiguration[ENV]\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setConfig(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [config, setConfig]);\n\n  if (!config) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <Box textAlign=\"left\" pl=\"2\">\n      <Text as=\"h2\" mb=\"2\">\n        Configuration\n      </Text>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Limits</Text>\n        <Text>Maximum daily spend: ${config.maximum_daily_spend}</Text>\n        <Text>Maximum weekly spend: ${config.maximum_weekly_spend}</Text>\n        <Text>Maximum monthly spend: ${config.maximum_monthly_spend}</Text>\n      </Box>\n\n      <Box mb=\"2\">\n        <Text as=\"h3\">Orders</Text>\n        <Text>Number of orders: {config.num_orders}</Text>\n        <Text>Percentage interval down: {config.interval_size * 100}%</Text>\n        <Text>\n          Comparison dollar-cost-average amount: ${config.daily_dca_amount}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Line,\n  BarChart,\n  Bar,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { groupBy } from \"underscore\";\nimport { API_URLS, ENV } from \"../App\";\n\nconst COLORS = {\n  btc: \"orange\",\n  eth: \"#407aff\",\n  comparison: \"grey\",\n};\n\nexport const Stats = () => {\n  const [stats, setStats] = useState();\n\n  useEffect(() => {\n    if (!stats) {\n      fetch(API_URLS.getStats[ENV])\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setStats(result);\n          },\n          (error) => {\n            console.error(error);\n          }\n        );\n    }\n  }, [stats, setStats]);\n\n  if (!stats) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  if (stats.length === 0) {\n    return <Text as=\"h1\">No data yet.</Text>\n  }\n\n  const statsSortedByDay = stats.sort(\n    (a, b) => moment(a.datetime) - moment(b.datetime)\n  );\n\n  const lastUpdated = moment(\n    statsSortedByDay[statsSortedByDay.length - 1].datetime\n  );\n  const nextUpdate = lastUpdated.add(24, \"hours\");\n\n  const hoursUntilUpdate = moment.duration(nextUpdate.diff(moment())).asHours();\n\n  const groupedStats = groupBy(stats, (stat) => {\n    return moment(stat.datetime).startOf(\"day\").format();\n  });\n\n  const savingsPercentages = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          savings: stat.savings_percent,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [cur.ticker]: cur.savings,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const coinAmounts = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          comparisonCoinAmount: stat.comparison_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}Actual`]: cur.actualCoinAmount,\n            [`${cur.ticker}Comparison`]: cur.comparisonCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dollarsSpent = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          totalSpend: stat.total_spend,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}TotalSpend`]: cur.totalSpend,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const marketPrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          currentPrice: stat.current_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CurrentPrice`]: cur.currentPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const coinsPurchased = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          actualCoinAmount: stat.actual_coin_amount,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}CoinAmount`]: cur.actualCoinAmount,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const dcaComparisonAveragePrice = Object.values(groupedStats)\n    .map((statsForDay) =>\n      statsForDay\n        .map((stat) => ({\n          name: moment(stat.datetime).format(\"MM/DD/YY\"),\n          averageDcaPrice: stat.average_dca_price,\n          ticker: stat.ticker,\n        }))\n        .reduce(\n          (prev, cur) => ({\n            ...prev,\n            name: cur.name,\n            [`${cur.ticker}AverageDcaPrice`]: cur.averageDcaPrice,\n          }),\n          {}\n        )\n    )\n    .sort((stat1, stat2) => moment(stat1.name) - moment(stat2.name));\n\n  const btcDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].btcusdTotalSpend;\n  const ethDollarsSpent =\n    dollarsSpent[dollarsSpent.length - 1].ethusdTotalSpend;\n\n  const btcCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].btcusdCoinAmount;\n\n  const ethCoinsPurchased =\n    coinsPurchased[coinsPurchased.length - 1].ethusdCoinAmount;\n\n  const btcLimitStrategyPrice = Math.round(btcDollarsSpent / btcCoinsPurchased);\n  const btcDcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1]\n      .btcusdAverageDcaPrice;\n\n  const ethLimitStrategyPrice = Math.round(ethDollarsSpent / ethCoinsPurchased);\n  const ethDcaComparisonPrice =\n    dcaComparisonAveragePrice[dcaComparisonAveragePrice.length - 1]\n      .ethusdAverageDcaPrice;\n\n  const btcLatestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1].btcusdCurrentPrice\n  );\n  const ethLatestPrice = parseFloat(\n    marketPrice[marketPrice.length - 1].ethusdCurrentPrice\n  );\n\n  const btcDcaComparisonCoinValue =\n    coinAmounts[coinAmounts.length - 1].btcusdComparison * btcLatestPrice;\n  const btcActualCoinValue =\n    coinAmounts[coinAmounts.length - 1].btcusdActual * btcLatestPrice;\n  const ethDcaComparisonCoinValue =\n    coinAmounts[coinAmounts.length - 1].ethusdComparison * ethLatestPrice;\n  const ethActualCoinValue =\n    coinAmounts[coinAmounts.length - 1].ethusdActual * ethLatestPrice;\n\n  return (\n    <>\n      <Text mt=\"2\">Stats update in {Math.round(hoursUntilUpdate)} hours</Text>\n      <Flex\n        flexDirection={[\"column\", \"row\"]}\n        mb=\"4\"\n        mt=\"2\"\n        w={1}\n        justifyContent=\"space-between\"\n      >\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Dollars spent</Text>\n          <Text>Bitcoin: ${btcDollarsSpent}</Text>\n          <Text>Ethereum: ${ethDollarsSpent}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Coins purchased</Text>\n          <Text>Bitcoin: {btcCoinsPurchased}</Text>\n          <Text>Ethereum: {ethCoinsPurchased}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Dollar-Cost-Average strategy</Text>\n          <Text>Bitcoin: ${btcDcaComparisonPrice}</Text>\n          <Text>Ethereum: ${ethDcaComparisonPrice}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Price per coin: Limit Strategy</Text>\n          <Text>Bitcoin: ${btcLimitStrategyPrice}</Text>\n          <Text>Ethereum: ${ethLimitStrategyPrice}</Text>\n        </Box>\n        <Box textAlign=\"left\" p=\"2\" minWidth=\"200px\">\n          <Text as=\"h3\">Advantage compared to DCA</Text>\n          <Text>\n            Bitcoin: {savingsPercentages[savingsPercentages.length - 1].btcusd}%\n          </Text>\n          <Text>\n            Ethereum: {savingsPercentages[savingsPercentages.length - 1].ethusd}\n            %\n          </Text>\n        </Box>\n      </Flex>\n      <Flex flexDirection={[\"column\", \"row\"]} flexWrap=\"wrap\">\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: btcDcaComparisonPrice,\n                  limit: btcLimitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: price per coin comparison</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: ethDcaComparisonPrice,\n                  limit: ethLimitStrategyPrice,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey=\"btcusdComparison\"\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar dataKey=\"btcusdActual\" name=\"actual\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: coin amounts compared to DCA</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              width={400}\n              height={400}\n              data={coinAmounts}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar\n                dataKey=\"ethusdComparison\"\n                name=\"comparison\"\n                fill={COLORS.comparison}\n              />\n              <Bar dataKey=\"ethusdActual\" name=\"actual\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Bitcoin: coin value, in dollars</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: btcDcaComparisonCoinValue,\n                  limit: btcActualCoinValue,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.btc} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Ethereum: coin value, in dollars</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart\n              data={[\n                {\n                  dca: ethDcaComparisonCoinValue,\n                  limit: ethActualCoinValue,\n                },\n              ]}\n              margin={{\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5,\n              }}\n            >\n              <CartesianGrid stroke=\"#333\" />\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <YAxis stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n\n              <Bar dataKey=\"dca\" name=\"dca strategy\" fill={COLORS.comparison} />\n              <Bar dataKey=\"limit\" name=\"limit strategy\" fill={COLORS.eth} />\n            </BarChart>\n          </ResponsiveContainer>\n        </Box>\n\n        <Box width={[1, 1 / 3]} mt=\"2\" mb=\"2\">\n          <Text as=\"h3\">Limit strategy advantage over time</Text>\n          <Text>(percentage dollars saved per coin)</Text>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart\n              data={savingsPercentages}\n              margin={{ top: 5, right: 5, left: 10, bottom: 5 }}\n            >\n              <XAxis dataKey=\"name\" stroke=\"#ebebeb\" />\n              <Tooltip />\n              <Legend />\n              <CartesianGrid stroke=\"#333\" />\n              <Line\n                type=\"monotone\"\n                dataKey=\"btcusd\"\n                stroke={COLORS.btc}\n                yAxisId={0}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"ethusd\"\n                stroke={COLORS.eth}\n                yAxisId={1}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\n\nconst TICKERS = [\"btcusd\", \"ethusd\"];\n\nexport const Trades = () => {\n  const [trades, setTrades] = useState();\n\n  useEffect(() => {\n    if (!trades) {\n      return Promise.all(\n        TICKERS.map((ticker) => {\n          return fetch(\n            `${API_URLS.getTradesList[ENV]}?ticker=${ticker}`\n          )\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades\n          .map((ticker) => {\n            tradesObj[ticker.ticker] = ticker.result.reverse();\n          });\n        setTrades(tradesObj);\n      });\n    }\n  }, [trades, setTrades]);\n\n  if (!trades) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h2\" mt=\"4\" ml=\"2\" textAlign=\"left\">\n        Buy History\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {TICKERS.map((ticker) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {trades[ticker] && (\n                <Box mt=\"2\" mb=\"2\">\n                  <Text as=\"h3\">Buy history: {ticker}</Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={trades[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              <table ml=\"4\">\n                <thead>\n                  <tr>\n                    <th>Date</th>\n                    <th>Price</th>\n                    <th>Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {trades[ticker] &&\n                    Object.values(trades[ticker])\n                      .reverse()\n                      .map((trade) => (\n                        <tr key={trade.tid}>\n                          <td>{trade.datetime}</td>\n                          <td>${trade.price}</td>\n                          <td>{trade.amount}</td>\n                        </tr>\n                      ))}\n                </tbody>\n              </table>\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { Box, Text, Flex } from \"rebass\";\nimport {\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  ScatterChart,\n  Scatter,\n  ReferenceLine,\n} from \"recharts\";\nimport { API_URLS, ENV } from \"../App\";\n\nconst TICKERS = [\"btcusd\", \"ethusd\"];\n\nexport const OpenOrders = () => {\n  const [orders, setOrders] = useState();\n  const [prices, setPrices] = useState();\n\n  useEffect(() => {\n    if (!prices) {\n      return Promise.all(\n        TICKERS.map((ticker) => {\n          return fetch(`${API_URLS.getOpenOrders[ENV]}?ticker=${ticker}`)\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                return { ticker: ticker, result };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const prices = Object.values(result);\n        let pricesObj = {};\n        // eslint-disable-next-line array-callback-return\n        prices?.map((ticker) => {\n          pricesObj[ticker.ticker] = ticker.result;\n        });\n        setPrices(pricesObj);\n      });\n    }\n    if (!orders) {\n      return Promise.all(\n        TICKERS.map((ticker) => {\n          return fetch(\n            `${API_URLS.getPrice}?ticker=${ticker}`\n          )\n            .then((res) => res.json())\n            .then(\n              (result) => {\n                const trades = result.map((trade) => ({\n                  ...trade,\n                  datetime: moment(trade.timestampms).format(\"MM/DD h:mm a\"),\n                }));\n                return { ticker: ticker, result: trades };\n              },\n              (error) => {\n                console.error(error);\n              }\n            );\n        })\n      ).then((result) => {\n        const trades = Object.values(result);\n        let tradesObj = {};\n        // eslint-disable-next-line array-callback-return\n        trades?.map((ticker) => {\n          tradesObj[ticker?.ticker] = ticker?.result;\n        });\n        setOrders(tradesObj);\n      });\n    }\n  }, [prices, setPrices, orders, setOrders]);\n\n  if (!orders) {\n    return <Text as=\"h1\">Loading...</Text>;\n  }\n\n  return (\n    <>\n      <Text as=\"h1\" mt=\"4\" ml=\"2\" mb=\"2\" textAlign=\"left\">\n        Open Orders\n      </Text>\n\n      <Text textAlign=\"left\" ml=\"2\" mb=\"2\">\n        Hi, I'm an asset-buying robot.\n      </Text>\n      <Text textAlign=\"left\" ml=\"2\" mb=\"4\">\n        Here's the strategy I'm trying right now: if the asset's{\" \"}\n        <span style={{ color: \"green\", fontWeight: \"bold\" }}>\n          price (green line)\n        </span>{\" \"}\n        drops down to any of the <strong>white dots (open buy orders)</strong>,\n        I buy it. Then, I create new orders based on the new price.\n      </Text>\n\n      <Flex width={1} flexDirection={[\"column\", \"row\"]}>\n        {TICKERS.map((ticker) => (\n          <Flex\n            key={ticker}\n            width={[1, 1 / 2]}\n            flexDirection={[\"column\", \"row\"]}\n          >\n            <Box width={[1, 1 / 2]}>\n              {orders[ticker] && (\n                <Box mt=\"2\" mb=\"2\" width={1}>\n                  <Text as=\"h3\" mb=\"2\">\n                    {ticker}\n                  </Text>\n                  <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                      data={orders[ticker]}\n                      margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                      }}\n                    >\n                      <CartesianGrid stroke=\"#333\" />\n                      <XAxis dataKey=\"datetime\" stroke=\"#ebebeb\" />\n                      <YAxis stroke=\"#ebebeb\" />\n                      <Tooltip />\n                      <Legend />\n                      <ReferenceLine\n                        y={prices[ticker]}\n                        stroke=\"green\"\n                        alwaysShow={true}\n                        label={{\n                          value: `current price - $${prices[ticker]}`,\n                          fill: \"white\",\n                        }}\n                        color=\"white\"\n                      />\n                      <Scatter dataKey=\"price\" fill=\"white\" />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Box>\n              )}\n            </Box>\n\n            <Box key={ticker} ml=\"2\" width={[1, 1 / 2]}>\n              <table ml=\"4\">\n                <thead>\n                  <tr>\n                    <th>Placed on</th>\n                    <th>Price</th>\n                    <th>Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {orders[ticker] &&\n                    Object.values(orders[ticker]).map((trade) => (\n                      <tr key={trade.tid}>\n                        <td>{trade.datetime}</td>\n                        <td>${trade.price}</td>\n                        <td>{trade.remaining_amount}</td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </Box>\n          </Flex>\n        ))}\n      </Flex>\n    </>\n  );\n};\n","import './App.css';\nimport { Configuration } from \"./components/Configuration\";\nimport { Stats } from \"./components/Stats\";\nimport { Trades } from \"./components/Trades\";\nimport { OpenOrders } from \"./components/OpenOrders\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  useLocation,\n} from \"react-router-dom\";\nimport { Box, Flex } from \"rebass\";\nimport React from 'react';\n\nexport const ENV = \"dev\";\n\nexport const API_URLS = {\n  getPrice: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_price\",\n  },\n  getOpenOrders: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_open_orders\",\n  },\n  getTradesList: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/get_trades_list\",\n  },\n  getConfiguration: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/configuration\",\n  },\n  getStats: {\n    dev: \"https://a3u69qjuqd.execute-api.us-east-1.amazonaws.com/dev/stats\",\n  },\n};\n\nfunction App() {\n  const linkPrefix =\n    process.env.NODE_ENV === \"development\" ? \"\" : \"/dashboard-limit-bot\";\n\n  const LinkContainer = ({ isActive = false, children }) => (\n    <Box\n      mb=\"4\"\n      mr=\"2\"\n      w=\"100%\"\n      sx={{\n        a: {\n          width: \"100%\",\n          background: isActive ? \"white\" : \"none\",\n          color: isActive ? \"#333\" : \"white\",\n          border: \"1px solid white\",\n          padding: \".5rem\",\n          textDecoration: \"none\"\n        },\n      }}\n    >\n      {children}\n    </Box>\n  );\n\n  const Links = () => {\n    const location = useLocation();\n\n    const links = [\n      {\n        path: `${linkPrefix}/orders`,\n        display: \"Open Orders\",\n      },\n      {\n        path: `${linkPrefix}/stats`,\n        display: \"Stats\",\n      },\n      {\n        path: `${linkPrefix}/trades`,\n        display: \"Buy History\",\n      },\n      {\n        path: `${linkPrefix}/configuration`,\n        display: \"Configuration\",\n      },\n    ];\n\n    return (\n      <Flex flexWrap=\"wrap\" mt=\"3\" ml=\"2\" flexDirection={[\"row\"]}>\n        {links.map((link) => (\n          <LinkContainer\n            isActive={location.pathname.includes(link.path)}\n          >\n            <Link to={link.path}>{link.display}</Link>\n          </LinkContainer>\n        ))}\n      </Flex>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Links />\n          <Routes>\n            <Route\n              path={`${linkPrefix}/`}\n              exact\n              element={<OpenOrders />}\n            />\n            <Route path={`${linkPrefix}/orders`} element={<OpenOrders />} />\n            <Route path={`${linkPrefix}/stats`} element={<Stats />} />\n            <Route path={`${linkPrefix}/trades`} element={<Trades />} />\n            <Route\n              path={`${linkPrefix}/configuration`}\n              element={<Configuration />}\n            />\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}